<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="updatedContent" value="# My Calculator - Math Made Minimalist&#10;&#10;[![Android](https://img.shields.io/badge/Android-3DDC84?style=for-the-badge&amp;logo=android&amp;logoColor=white)](https://developer.android.com/)&#10;[![Java](https://img.shields.io/badge/Java-ED8B00?style=for-the-badge&amp;logo=java&amp;logoColor=white)](https://www.java.com/)&#10;[![Material Design](https://img.shields.io/badge/Material%20Design-757575?style=for-the-badge&amp;logo=material-design&amp;logoColor=white)](https://material.io/)&#10;&#10;A modern, elegant Android calculator app with a clean dark theme and intuitive user interface. **Math Made Minimalist** - simplicity meets functionality.&#10;&#10;## ✨ Features&#10;&#10;###  Calculator&#10;- **Basic Operations**: Addition, Subtraction, Multiplication, Division&#10;- **Advanced Functions**: Percentage calculations, Plus/Minus toggle&#10;- **Smart Input**: Automatic comma formatting for large numbers&#10;- **Gesture Support**: &#10;  - Swipe right to delete last digit&#10;  - Double-tap to copy result to clipboard&#10;- **Error Handling**: Division by zero protection&#10;- **Responsive UI**: Smooth button animations and visual feedback&#10;&#10;###  Currency Converter&#10;- **Multi-Currency Support**: USD, INR, EUR, GBP, JPY, AUD, CAD, CHF, CNY, SGD&#10;- **Real-time Conversion**: Instant currency calculations&#10;- **Quick Conversions**: One-tap popular currency pairs (USD↔INR, EUR→INR, GBP→INR)&#10;- **Swap Feature**: Easy currency pair switching&#10;- **Exchange Rate Display**: Current rate information with timestamps&#10;&#10;###  Calculation History&#10;- **Persistent Storage**: All calculations saved locally&#10;- **Timestamp Tracking**: Date and time for each calculation&#10;- **Easy Management**: Clear individual or all history entries&#10;- **Copy Results**: Tap any history item to copy result&#10;- **Smart Limit**: Maintains last 100 calculations for optimal performance&#10;&#10;###  User Interface&#10;- **Dark Theme**: Eye-friendly dark mode design&#10;- **Material Design**: Following Google's Material Design principles&#10;- **Navigation Drawer**: Smooth side menu navigation&#10;- **Dynamic Titles**: Context-aware page titles&#10;- **Responsive Layout**: Optimized for different screen sizes&#10;&#10;##  Screenshots&#10;&#10;&gt; Add your app screenshots here to showcase the UI&#10;&#10;##  Getting Started&#10;&#10;### Prerequisites&#10;- Android Studio Arctic Fox or later&#10;- Android SDK API level 24 or higher&#10;- Java 11 or later&#10;&#10;### Installation&#10;&#10;1. **Clone the repository**&#10;   ```bash&#10;   git clone https://github.com/yourusername/MyCalculator.git&#10;   cd MyCalculator&#10;   ```&#10;&#10;2. **Open in Android Studio**&#10;   - Launch Android Studio&#10;   - Select &quot;Open an existing project&quot;&#10;   - Navigate to the cloned directory&#10;&#10;3. **Build and Run**&#10;   - Sync project with Gradle files&#10;   - Connect your Android device or start an emulator&#10;   - Click &quot;Run&quot; or press `Ctrl+R`&#10;&#10;## ️ Technical Details&#10;&#10;### Architecture&#10;- **Language**: Java&#10;- **UI Framework**: Android Views with Material Design Components&#10;- **Data Storage**: SharedPreferences with Gson for JSON serialization&#10;- **Pattern**: Single Activity with multiple content views&#10;&#10;### Key Technologies&#10;- **Navigation**: DrawerLayout with NavigationView&#10;- **Animations**: ObjectAnimator for smooth UI transitions&#10;- **Gesture Recognition**: GestureDetector for swipe and tap gestures&#10;- **Data Persistence**: SharedPreferences for local storage&#10;- **JSON Handling**: Gson library for data serialization&#10;&#10;### Project Structure&#10;```&#10;app/src/main/java/com/abhishek/mycalculator/&#10;├── MainActivity.java          # Main activity with calculator logic&#10;├── HistoryActivity.java       # History management (separate activity)&#10;├── CurrencyConverterActivity.java # Currency conversion (separate activity)&#10;├── CalculationHistory.java   # Data model for history entries&#10;└── HistoryAdapter.java        # RecyclerView adapter for history list&#10;&#10;app/src/main/res/&#10;├── layout/                    # UI layouts&#10;├── values/                    # Colors, strings, dimensions&#10;├── drawable/                  # Icons and graphics&#10;└── menu/                      # Navigation menu items&#10;```&#10;&#10;### Dependencies&#10;- **AndroidX AppCompat**: Backward compatibility&#10;- **Material Components**: Modern UI elements&#10;- **RecyclerView**: Efficient list rendering&#10;- **Gson**: JSON serialization for data storage&#10;&#10;##  App Specifications&#10;&#10;| Specification | Details |&#10;|---------------|---------|&#10;| **Min SDK** | API 24 (Android 7.0) |&#10;| **Target SDK** | API 35 (Android 15) |&#10;| **Version** | 1.0 |&#10;| **Package** | com.abhishek.mycalculator |&#10;| **Architecture** | MVVM-like with single activity |&#10;&#10;##  Key Highlights&#10;&#10;- **Zero Dependencies**: No external APIs required for core functionality&#10;- **Offline First**: Works completely offline&#10;- **Lightweight**: Minimal app size and memory footprint&#10;- **Smooth Performance**: Optimized calculations and UI rendering&#10;- **Data Persistence**: Automatic save/restore of calculation history&#10;- **Error Resilient**: Comprehensive error handling and validation&#10;&#10;##  Contributing&#10;&#10;1. Fork the repository&#10;2. Create your feature branch (`git checkout -b feature/AmazingFeature`)&#10;3. Commit your changes (`git commit -m 'Add some AmazingFeature'`)&#10;4. Push to the branch (`git push origin feature/AmazingFeature`)&#10;5. Open a Pull Request&#10;&#10;##  Future Enhancements&#10;&#10;- [ ] Scientific calculator mode&#10;- [ ] Live currency exchange rates via API&#10;- [ ] Export history to CSV/PDF&#10;- [ ] Custom themes and color schemes&#10;- [ ] Voice input for calculations&#10;- [ ] Widget support for home screen&#10;- [ ] Backup and sync across devices&#10;&#10;##  License&#10;&#10;This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.&#10;&#10;## ‍ Developer&#10;&#10;**Abhishek**&#10;- GitHub: [@yourusername](https://github.com/yourusername)&#10;- Email: your.email@example.com&#10;&#10;##  Acknowledgments&#10;&#10;- Material Design guidelines by Google&#10;- Android developer community&#10;- Open source contributors&#10;&#10;---&#10;&#10;⭐ If you found this project helpful, please consider giving it a star!&#10;&#10;**Made with ❤️ for Android users who love clean, functional design**" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.MyCalculator&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;        &lt;activity&#10;            android:name=&quot;.HistoryActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.MainActivity&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.CurrencyConverterActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.MainActivity&quot; /&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.MyCalculator&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;        &lt;activity&#10;            android:name=&quot;.HistoryActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:label=&quot;History&quot;&#10;            android:parentActivityName=&quot;.MainActivity&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.CurrencyConverterActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:label=&quot;Currency Converter&quot;&#10;            android:parentActivityName=&quot;.MainActivity&quot; /&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/abhishek/mycalculator/CurrencyConverterActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/abhishek/mycalculator/CurrencyConverterActivity.java" />
              <option name="originalContent" value="package com.abhishek.mycalculator;&#10;&#10;import android.os.Bundle;&#10;import android.text.Editable;&#10;import android.text.TextWatcher;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.widget.AdapterView;&#10;import android.widget.ArrayAdapter;&#10;import android.widget.Button;&#10;import android.widget.EditText;&#10;import android.widget.Spinner;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;&#10;import java.text.DecimalFormat;&#10;import java.text.SimpleDateFormat;&#10;import java.util.ArrayList;&#10;import java.util.Date;&#10;import java.util.HashMap;&#10;import java.util.List;&#10;import java.util.Locale;&#10;import java.util.Map;&#10;&#10;public class CurrencyConverterActivity extends AppCompatActivity {&#10;&#10;    private Spinner spinnerFromCurrency, spinnerToCurrency;&#10;    private EditText etFromAmount;&#10;    private TextView tvToAmount, tvExchangeRate, tvLastUpdated;&#10;    private Button btnConvert, btnSwapCurrencies;&#10;    private Button btnUsdToInr, btnEurToInr, btnGbpToInr, btnInrToUsd;&#10;&#10;    private List&lt;Currency&gt; currencyList;&#10;    private ArrayAdapter&lt;Currency&gt; currencyAdapter;&#10;    private Map&lt;String, Double&gt; exchangeRates;&#10;    private DecimalFormat decimalFormat;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_currency_converter);&#10;&#10;        initializeViews();&#10;        setupToolbar();&#10;        setupCurrencies();&#10;        setupExchangeRates();&#10;        setupSpinners();&#10;        setupClickListeners();&#10;        updateLastUpdatedTime();&#10;    }&#10;&#10;    private void initializeViews() {&#10;        spinnerFromCurrency = findViewById(R.id.spinnerFromCurrency);&#10;        spinnerToCurrency = findViewById(R.id.spinnerToCurrency);&#10;        etFromAmount = findViewById(R.id.etFromAmount);&#10;        tvToAmount = findViewById(R.id.tvToAmount);&#10;        tvExchangeRate = findViewById(R.id.tvExchangeRate);&#10;        tvLastUpdated = findViewById(R.id.tvLastUpdated);&#10;        btnConvert = findViewById(R.id.btnConvert);&#10;        btnSwapCurrencies = findViewById(R.id.btnSwapCurrencies);&#10;        btnUsdToInr = findViewById(R.id.btnUsdToInr);&#10;        btnEurToInr = findViewById(R.id.btnEurToInr);&#10;        btnGbpToInr = findViewById(R.id.btnGbpToInr);&#10;        btnInrToUsd = findViewById(R.id.btnInrToUsd);&#10;&#10;        decimalFormat = new DecimalFormat(&quot;#,##0.00&quot;);&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        Toolbar toolbar = findViewById(R.id.toolbar);&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;            getSupportActionBar().setDisplayShowHomeEnabled(true);&#10;        }&#10;    }&#10;&#10;    private void setupCurrencies() {&#10;        currencyList = new ArrayList&lt;&gt;();&#10;        currencyList.add(new Currency(&quot;USD&quot;, &quot;US Dollar&quot;, &quot;$&quot;));&#10;        currencyList.add(new Currency(&quot;EUR&quot;, &quot;Euro&quot;, &quot;€&quot;));&#10;        currencyList.add(new Currency(&quot;GBP&quot;, &quot;British Pound&quot;, &quot;£&quot;));&#10;        currencyList.add(new Currency(&quot;INR&quot;, &quot;Indian Rupee&quot;, &quot;₹&quot;));&#10;        currencyList.add(new Currency(&quot;JPY&quot;, &quot;Japanese Yen&quot;, &quot;¥&quot;));&#10;        currencyList.add(new Currency(&quot;AUD&quot;, &quot;Australian Dollar&quot;, &quot;A$&quot;));&#10;        currencyList.add(new Currency(&quot;CAD&quot;, &quot;Canadian Dollar&quot;, &quot;C$&quot;));&#10;        currencyList.add(new Currency(&quot;CHF&quot;, &quot;Swiss Franc&quot;, &quot;Fr&quot;));&#10;        currencyList.add(new Currency(&quot;CNY&quot;, &quot;Chinese Yuan&quot;, &quot;¥&quot;));&#10;        currencyList.add(new Currency(&quot;SGD&quot;, &quot;Singapore Dollar&quot;, &quot;S$&quot;));&#10;    }&#10;&#10;    private void setupExchangeRates() {&#10;        // Sample exchange rates (in real app, you would fetch from API)&#10;        exchangeRates = new HashMap&lt;&gt;();&#10;&#10;        // USD as base currency&#10;        exchangeRates.put(&quot;USD_EUR&quot;, 0.85);&#10;        exchangeRates.put(&quot;USD_GBP&quot;, 0.73);&#10;        exchangeRates.put(&quot;USD_INR&quot;, 83.15);&#10;        exchangeRates.put(&quot;USD_JPY&quot;, 149.50);&#10;        exchangeRates.put(&quot;USD_AUD&quot;, 1.52);&#10;        exchangeRates.put(&quot;USD_CAD&quot;, 1.36);&#10;        exchangeRates.put(&quot;USD_CHF&quot;, 0.88);&#10;        exchangeRates.put(&quot;USD_CNY&quot;, 7.23);&#10;        exchangeRates.put(&quot;USD_SGD&quot;, 1.34);&#10;&#10;        // EUR rates&#10;        exchangeRates.put(&quot;EUR_USD&quot;, 1.18);&#10;        exchangeRates.put(&quot;EUR_GBP&quot;, 0.86);&#10;        exchangeRates.put(&quot;EUR_INR&quot;, 97.89);&#10;&#10;        // GBP rates&#10;        exchangeRates.put(&quot;GBP_USD&quot;, 1.37);&#10;        exchangeRates.put(&quot;GBP_EUR&quot;, 1.16);&#10;        exchangeRates.put(&quot;GBP_INR&quot;, 113.97);&#10;&#10;        // INR rates&#10;        exchangeRates.put(&quot;INR_USD&quot;, 0.012);&#10;        exchangeRates.put(&quot;INR_EUR&quot;, 0.010);&#10;        exchangeRates.put(&quot;INR_GBP&quot;, 0.0088);&#10;&#10;        // Add more rates as needed&#10;    }&#10;&#10;    private void setupSpinners() {&#10;        currencyAdapter = new ArrayAdapter&lt;&gt;(this, android.R.layout.simple_spinner_item, currencyList);&#10;        currencyAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;&#10;        spinnerFromCurrency.setAdapter(currencyAdapter);&#10;        spinnerToCurrency.setAdapter(currencyAdapter);&#10;&#10;        // Set default selections&#10;        spinnerFromCurrency.setSelection(0); // USD&#10;        spinnerToCurrency.setSelection(3); // INR&#10;&#10;        // Setup spinner listeners&#10;        spinnerFromCurrency.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {&#10;            @Override&#10;            public void onItemSelected(AdapterView&lt;?&gt; parent, View view, int position, long id) {&#10;                updateExchangeRateDisplay();&#10;                convertCurrency();&#10;            }&#10;&#10;            @Override&#10;            public void onNothingSelected(AdapterView&lt;?&gt; parent) {}&#10;        });&#10;&#10;        spinnerToCurrency.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {&#10;            @Override&#10;            public void onItemSelected(AdapterView&lt;?&gt; parent, View view, int position, long id) {&#10;                updateExchangeRateDisplay();&#10;                convertCurrency();&#10;            }&#10;&#10;            @Override&#10;            public void onNothingSelected(AdapterView&lt;?&gt; parent) {}&#10;        });&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        btnConvert.setOnClickListener(v -&gt; convertCurrency());&#10;&#10;        btnSwapCurrencies.setOnClickListener(v -&gt; swapCurrencies());&#10;&#10;        // Popular conversion buttons&#10;        btnUsdToInr.setOnClickListener(v -&gt; setPopularConversion(&quot;USD&quot;, &quot;INR&quot;));&#10;        btnEurToInr.setOnClickListener(v -&gt; setPopularConversion(&quot;EUR&quot;, &quot;INR&quot;));&#10;        btnGbpToInr.setOnClickListener(v -&gt; setPopularConversion(&quot;GBP&quot;, &quot;INR&quot;));&#10;        btnInrToUsd.setOnClickListener(v -&gt; setPopularConversion(&quot;INR&quot;, &quot;USD&quot;));&#10;&#10;        // Text watcher for auto conversion&#10;        etFromAmount.addTextChangedListener(new TextWatcher() {&#10;            @Override&#10;            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}&#10;&#10;            @Override&#10;            public void onTextChanged(CharSequence s, int start, int before, int count) {}&#10;&#10;            @Override&#10;            public void afterTextChanged(Editable s) {&#10;                convertCurrency();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void convertCurrency() {&#10;        String amountStr = etFromAmount.getText().toString().trim();&#10;        if (amountStr.isEmpty()) {&#10;            tvToAmount.setText(&quot;0.00&quot;);&#10;            return;&#10;        }&#10;&#10;        try {&#10;            double amount = Double.parseDouble(amountStr);&#10;            Currency fromCurrency = (Currency) spinnerFromCurrency.getSelectedItem();&#10;            Currency toCurrency = (Currency) spinnerToCurrency.getSelectedItem();&#10;&#10;            if (fromCurrency != null &amp;&amp; toCurrency != null) {&#10;                double convertedAmount = performConversion(amount, fromCurrency.getCode(), toCurrency.getCode());&#10;                tvToAmount.setText(decimalFormat.format(convertedAmount));&#10;            }&#10;        } catch (NumberFormatException e) {&#10;            tvToAmount.setText(&quot;0.00&quot;);&#10;        }&#10;    }&#10;&#10;    private double performConversion(double amount, String fromCode, String toCode) {&#10;        if (fromCode.equals(toCode)) {&#10;            return amount;&#10;        }&#10;&#10;        String rateKey = fromCode + &quot;_&quot; + toCode;&#10;        Double rate = exchangeRates.get(rateKey);&#10;&#10;        if (rate != null) {&#10;            return amount * rate;&#10;        } else {&#10;            // Try reverse conversion&#10;            String reverseKey = toCode + &quot;_&quot; + fromCode;&#10;            Double reverseRate = exchangeRates.get(reverseKey);&#10;            if (reverseRate != null) {&#10;                return amount / reverseRate;&#10;            }&#10;        }&#10;&#10;        // Fallback: convert through USD&#10;        if (!fromCode.equals(&quot;USD&quot;) &amp;&amp; !toCode.equals(&quot;USD&quot;)) {&#10;            double usdAmount = performConversion(amount, fromCode, &quot;USD&quot;);&#10;            return performConversion(usdAmount, &quot;USD&quot;, toCode);&#10;        }&#10;&#10;        return amount; // No conversion available&#10;    }&#10;&#10;    private void swapCurrencies() {&#10;        int fromPosition = spinnerFromCurrency.getSelectedItemPosition();&#10;        int toPosition = spinnerToCurrency.getSelectedItemPosition();&#10;&#10;        spinnerFromCurrency.setSelection(toPosition);&#10;        spinnerToCurrency.setSelection(fromPosition);&#10;&#10;        // Also swap the amounts&#10;        String fromAmount = etFromAmount.getText().toString();&#10;        String toAmount = tvToAmount.getText().toString();&#10;&#10;        if (!toAmount.equals(&quot;0.00&quot;) &amp;&amp; !toAmount.isEmpty()) {&#10;            // Remove formatting from toAmount&#10;            String cleanAmount = toAmount.replace(&quot;,&quot;, &quot;&quot;);&#10;            etFromAmount.setText(cleanAmount);&#10;        }&#10;    }&#10;&#10;    private void setPopularConversion(String fromCode, String toCode) {&#10;        // Find positions of currencies&#10;        int fromPosition = findCurrencyPosition(fromCode);&#10;        int toPosition = findCurrencyPosition(toCode);&#10;&#10;        if (fromPosition != -1 &amp;&amp; toPosition != -1) {&#10;            spinnerFromCurrency.setSelection(fromPosition);&#10;            spinnerToCurrency.setSelection(toPosition);&#10;&#10;            if (etFromAmount.getText().toString().isEmpty()) {&#10;                etFromAmount.setText(&quot;1&quot;);&#10;            }&#10;        }&#10;    }&#10;&#10;    private int findCurrencyPosition(String currencyCode) {&#10;        for (int i = 0; i &lt; currencyList.size(); i++) {&#10;            if (currencyList.get(i).getCode().equals(currencyCode)) {&#10;                return i;&#10;            }&#10;        }&#10;        return -1;&#10;    }&#10;&#10;    private void updateExchangeRateDisplay() {&#10;        Currency fromCurrency = (Currency) spinnerFromCurrency.getSelectedItem();&#10;        Currency toCurrency = (Currency) spinnerToCurrency.getSelectedItem();&#10;&#10;        if (fromCurrency != null &amp;&amp; toCurrency != null) {&#10;            double rate = performConversion(1.0, fromCurrency.getCode(), toCurrency.getCode());&#10;            String rateText = &quot;1 &quot; + fromCurrency.getCode() + &quot; = &quot; +&#10;                             decimalFormat.format(rate) + &quot; &quot; + toCurrency.getCode();&#10;            tvExchangeRate.setText(rateText);&#10;        }&#10;    }&#10;&#10;    private void updateLastUpdatedTime() {&#10;        SimpleDateFormat sdf = new SimpleDateFormat(&quot;MMM dd, hh:mm a&quot;, Locale.getDefault());&#10;        String currentTime = sdf.format(new Date());&#10;        tvLastUpdated.setText(&quot;Last updated: &quot; + currentTime);&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(MenuItem item) {&#10;        if (item.getItemId() == android.R.id.home) {&#10;            finish();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.abhishek.mycalculator;&#13;&#10;&#13;&#10;import android.os.Bundle;&#13;&#10;import android.text.Editable;&#13;&#10;import android.text.TextWatcher;&#13;&#10;import android.view.MenuItem;&#13;&#10;import android.view.View;&#13;&#10;import android.widget.AdapterView;&#13;&#10;import android.widget.ArrayAdapter;&#13;&#10;import android.widget.Button;&#13;&#10;import android.widget.EditText;&#13;&#10;import android.widget.Spinner;&#13;&#10;import android.widget.TextView;&#13;&#10;import android.widget.Toast;&#13;&#10;&#13;&#10;import androidx.appcompat.app.AppCompatActivity;&#13;&#10;import androidx.appcompat.widget.Toolbar;&#13;&#10;&#13;&#10;import java.text.DecimalFormat;&#13;&#10;import java.text.SimpleDateFormat;&#13;&#10;import java.util.ArrayList;&#13;&#10;import java.util.Date;&#13;&#10;import java.util.HashMap;&#13;&#10;import java.util.List;&#13;&#10;import java.util.Locale;&#13;&#10;import java.util.Map;&#13;&#10;&#13;&#10;public class CurrencyConverterActivity extends AppCompatActivity {&#13;&#10;&#13;&#10;    private Spinner spinnerFromCurrency, spinnerToCurrency;&#13;&#10;    private EditText etFromAmount;&#13;&#10;    private TextView tvToAmount, tvExchangeRate, tvLastUpdated;&#13;&#10;    private Button btnConvert, btnSwapCurrencies;&#13;&#10;    private Button btnUsdToInr, btnEurToInr, btnGbpToInr, btnInrToUsd;&#13;&#10;&#13;&#10;    private List&lt;Currency&gt; currencyList;&#13;&#10;    private ArrayAdapter&lt;Currency&gt; currencyAdapter;&#13;&#10;    private Map&lt;String, Double&gt; exchangeRates;&#13;&#10;    private DecimalFormat decimalFormat;&#13;&#10;&#13;&#10;    @Override&#13;&#10;    protected void onCreate(Bundle savedInstanceState) {&#13;&#10;        super.onCreate(savedInstanceState);&#13;&#10;        setContentView(R.layout.activity_currency_converter);&#13;&#10;&#13;&#10;        initializeViews();&#13;&#10;        setupToolbar();&#13;&#10;        setupCurrencies();&#13;&#10;        setupExchangeRates();&#13;&#10;        setupSpinners();&#13;&#10;        setupClickListeners();&#13;&#10;        updateLastUpdatedTime();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void initializeViews() {&#13;&#10;        spinnerFromCurrency = findViewById(R.id.spinnerFromCurrency);&#13;&#10;        spinnerToCurrency = findViewById(R.id.spinnerToCurrency);&#13;&#10;        etFromAmount = findViewById(R.id.etFromAmount);&#13;&#10;        tvToAmount = findViewById(R.id.tvToAmount);&#13;&#10;        tvExchangeRate = findViewById(R.id.tvExchangeRate);&#13;&#10;        tvLastUpdated = findViewById(R.id.tvLastUpdated);&#13;&#10;        btnConvert = findViewById(R.id.btnConvert);&#13;&#10;        btnSwapCurrencies = findViewById(R.id.btnSwapCurrencies);&#13;&#10;        btnUsdToInr = findViewById(R.id.btnUsdToInr);&#13;&#10;        btnEurToInr = findViewById(R.id.btnEurToInr);&#13;&#10;        btnGbpToInr = findViewById(R.id.btnGbpToInr);&#13;&#10;        btnInrToUsd = findViewById(R.id.btnInrToUsd);&#13;&#10;&#13;&#10;        decimalFormat = new DecimalFormat(&quot;#,##0.00&quot;);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupToolbar() {&#13;&#10;        Toolbar toolbar = findViewById(R.id.toolbar);&#13;&#10;        setSupportActionBar(toolbar);&#13;&#10;        if (getSupportActionBar() != null) {&#13;&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#13;&#10;            getSupportActionBar().setDisplayShowHomeEnabled(true);&#13;&#10;            getSupportActionBar().setTitle(&quot;Currency Converter&quot;);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupCurrencies() {&#13;&#10;        currencyList = new ArrayList&lt;&gt;();&#13;&#10;        currencyList.add(new Currency(&quot;USD&quot;, &quot;US Dollar&quot;, &quot;$&quot;));&#13;&#10;        currencyList.add(new Currency(&quot;EUR&quot;, &quot;Euro&quot;, &quot;€&quot;));&#13;&#10;        currencyList.add(new Currency(&quot;GBP&quot;, &quot;British Pound&quot;, &quot;£&quot;));&#13;&#10;        currencyList.add(new Currency(&quot;INR&quot;, &quot;Indian Rupee&quot;, &quot;₹&quot;));&#13;&#10;        currencyList.add(new Currency(&quot;JPY&quot;, &quot;Japanese Yen&quot;, &quot;¥&quot;));&#13;&#10;        currencyList.add(new Currency(&quot;AUD&quot;, &quot;Australian Dollar&quot;, &quot;A$&quot;));&#13;&#10;        currencyList.add(new Currency(&quot;CAD&quot;, &quot;Canadian Dollar&quot;, &quot;C$&quot;));&#13;&#10;        currencyList.add(new Currency(&quot;CHF&quot;, &quot;Swiss Franc&quot;, &quot;Fr&quot;));&#13;&#10;        currencyList.add(new Currency(&quot;CNY&quot;, &quot;Chinese Yuan&quot;, &quot;¥&quot;));&#13;&#10;        currencyList.add(new Currency(&quot;SGD&quot;, &quot;Singapore Dollar&quot;, &quot;S$&quot;));&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupExchangeRates() {&#13;&#10;        // Sample exchange rates (in real app, you would fetch from API)&#13;&#10;        exchangeRates = new HashMap&lt;&gt;();&#13;&#10;&#13;&#10;        // USD as base currency&#13;&#10;        exchangeRates.put(&quot;USD_EUR&quot;, 0.85);&#13;&#10;        exchangeRates.put(&quot;USD_GBP&quot;, 0.73);&#13;&#10;        exchangeRates.put(&quot;USD_INR&quot;, 83.15);&#13;&#10;        exchangeRates.put(&quot;USD_JPY&quot;, 149.50);&#13;&#10;        exchangeRates.put(&quot;USD_AUD&quot;, 1.52);&#13;&#10;        exchangeRates.put(&quot;USD_CAD&quot;, 1.36);&#13;&#10;        exchangeRates.put(&quot;USD_CHF&quot;, 0.88);&#13;&#10;        exchangeRates.put(&quot;USD_CNY&quot;, 7.23);&#13;&#10;        exchangeRates.put(&quot;USD_SGD&quot;, 1.34);&#13;&#10;&#13;&#10;        // EUR rates&#13;&#10;        exchangeRates.put(&quot;EUR_USD&quot;, 1.18);&#13;&#10;        exchangeRates.put(&quot;EUR_GBP&quot;, 0.86);&#13;&#10;        exchangeRates.put(&quot;EUR_INR&quot;, 97.89);&#13;&#10;&#13;&#10;        // GBP rates&#13;&#10;        exchangeRates.put(&quot;GBP_USD&quot;, 1.37);&#13;&#10;        exchangeRates.put(&quot;GBP_EUR&quot;, 1.16);&#13;&#10;        exchangeRates.put(&quot;GBP_INR&quot;, 113.97);&#13;&#10;&#13;&#10;        // INR rates&#13;&#10;        exchangeRates.put(&quot;INR_USD&quot;, 0.012);&#13;&#10;        exchangeRates.put(&quot;INR_EUR&quot;, 0.010);&#13;&#10;        exchangeRates.put(&quot;INR_GBP&quot;, 0.0088);&#13;&#10;&#13;&#10;        // Add more rates as needed&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupSpinners() {&#13;&#10;        currencyAdapter = new ArrayAdapter&lt;&gt;(this, android.R.layout.simple_spinner_item, currencyList);&#13;&#10;        currencyAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#13;&#10;&#13;&#10;        spinnerFromCurrency.setAdapter(currencyAdapter);&#13;&#10;        spinnerToCurrency.setAdapter(currencyAdapter);&#13;&#10;&#13;&#10;        // Set default selections&#13;&#10;        spinnerFromCurrency.setSelection(0); // USD&#13;&#10;        spinnerToCurrency.setSelection(3); // INR&#13;&#10;&#13;&#10;        // Setup spinner listeners&#13;&#10;        spinnerFromCurrency.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {&#13;&#10;            @Override&#13;&#10;            public void onItemSelected(AdapterView&lt;?&gt; parent, View view, int position, long id) {&#13;&#10;                updateExchangeRateDisplay();&#13;&#10;                convertCurrency();&#13;&#10;            }&#13;&#10;&#13;&#10;            @Override&#13;&#10;            public void onNothingSelected(AdapterView&lt;?&gt; parent) {}&#13;&#10;        });&#13;&#10;&#13;&#10;        spinnerToCurrency.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {&#13;&#10;            @Override&#13;&#10;            public void onItemSelected(AdapterView&lt;?&gt; parent, View view, int position, long id) {&#13;&#10;                updateExchangeRateDisplay();&#13;&#10;                convertCurrency();&#13;&#10;            }&#13;&#10;&#13;&#10;            @Override&#13;&#10;            public void onNothingSelected(AdapterView&lt;?&gt; parent) {}&#13;&#10;        });&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupClickListeners() {&#13;&#10;        btnConvert.setOnClickListener(v -&gt; convertCurrency());&#13;&#10;&#13;&#10;        btnSwapCurrencies.setOnClickListener(v -&gt; swapCurrencies());&#13;&#10;&#13;&#10;        // Popular conversion buttons&#13;&#10;        btnUsdToInr.setOnClickListener(v -&gt; setPopularConversion(&quot;USD&quot;, &quot;INR&quot;));&#13;&#10;        btnEurToInr.setOnClickListener(v -&gt; setPopularConversion(&quot;EUR&quot;, &quot;INR&quot;));&#13;&#10;        btnGbpToInr.setOnClickListener(v -&gt; setPopularConversion(&quot;GBP&quot;, &quot;INR&quot;));&#13;&#10;        btnInrToUsd.setOnClickListener(v -&gt; setPopularConversion(&quot;INR&quot;, &quot;USD&quot;));&#13;&#10;&#13;&#10;        // Text watcher for auto conversion&#13;&#10;        etFromAmount.addTextChangedListener(new TextWatcher() {&#13;&#10;            @Override&#13;&#10;            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}&#13;&#10;&#13;&#10;            @Override&#13;&#10;            public void onTextChanged(CharSequence s, int start, int before, int count) {}&#13;&#10;&#13;&#10;            @Override&#13;&#10;            public void afterTextChanged(Editable s) {&#13;&#10;                convertCurrency();&#13;&#10;            }&#13;&#10;        });&#13;&#10;    }&#13;&#10;&#13;&#10;    private void convertCurrency() {&#13;&#10;        String amountStr = etFromAmount.getText().toString().trim();&#13;&#10;        if (amountStr.isEmpty()) {&#13;&#10;            tvToAmount.setText(&quot;0.00&quot;);&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        try {&#13;&#10;            double amount = Double.parseDouble(amountStr);&#13;&#10;            Currency fromCurrency = (Currency) spinnerFromCurrency.getSelectedItem();&#13;&#10;            Currency toCurrency = (Currency) spinnerToCurrency.getSelectedItem();&#13;&#10;&#13;&#10;            if (fromCurrency != null &amp;&amp; toCurrency != null) {&#13;&#10;                double convertedAmount = performConversion(amount, fromCurrency.getCode(), toCurrency.getCode());&#13;&#10;                tvToAmount.setText(decimalFormat.format(convertedAmount));&#13;&#10;            }&#13;&#10;        } catch (NumberFormatException e) {&#13;&#10;            tvToAmount.setText(&quot;0.00&quot;);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private double performConversion(double amount, String fromCode, String toCode) {&#13;&#10;        if (fromCode.equals(toCode)) {&#13;&#10;            return amount;&#13;&#10;        }&#13;&#10;&#13;&#10;        String rateKey = fromCode + &quot;_&quot; + toCode;&#13;&#10;        Double rate = exchangeRates.get(rateKey);&#13;&#10;&#13;&#10;        if (rate != null) {&#13;&#10;            return amount * rate;&#13;&#10;        } else {&#13;&#10;            // Try reverse conversion&#13;&#10;            String reverseKey = toCode + &quot;_&quot; + fromCode;&#13;&#10;            Double reverseRate = exchangeRates.get(reverseKey);&#13;&#10;            if (reverseRate != null) {&#13;&#10;                return amount / reverseRate;&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        // Fallback: convert through USD&#13;&#10;        if (!fromCode.equals(&quot;USD&quot;) &amp;&amp; !toCode.equals(&quot;USD&quot;)) {&#13;&#10;            double usdAmount = performConversion(amount, fromCode, &quot;USD&quot;);&#13;&#10;            return performConversion(usdAmount, &quot;USD&quot;, toCode);&#13;&#10;        }&#13;&#10;&#13;&#10;        return amount; // No conversion available&#13;&#10;    }&#13;&#10;&#13;&#10;    private void swapCurrencies() {&#13;&#10;        int fromPosition = spinnerFromCurrency.getSelectedItemPosition();&#13;&#10;        int toPosition = spinnerToCurrency.getSelectedItemPosition();&#13;&#10;&#13;&#10;        spinnerFromCurrency.setSelection(toPosition);&#13;&#10;        spinnerToCurrency.setSelection(fromPosition);&#13;&#10;&#13;&#10;        // Also swap the amounts&#13;&#10;        String fromAmount = etFromAmount.getText().toString();&#13;&#10;        String toAmount = tvToAmount.getText().toString();&#13;&#10;&#13;&#10;        if (!toAmount.equals(&quot;0.00&quot;) &amp;&amp; !toAmount.isEmpty()) {&#13;&#10;            // Remove formatting from toAmount&#13;&#10;            String cleanAmount = toAmount.replace(&quot;,&quot;, &quot;&quot;);&#13;&#10;            etFromAmount.setText(cleanAmount);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setPopularConversion(String fromCode, String toCode) {&#13;&#10;        // Find positions of currencies&#13;&#10;        int fromPosition = findCurrencyPosition(fromCode);&#13;&#10;        int toPosition = findCurrencyPosition(toCode);&#13;&#10;&#13;&#10;        if (fromPosition != -1 &amp;&amp; toPosition != -1) {&#13;&#10;            spinnerFromCurrency.setSelection(fromPosition);&#13;&#10;            spinnerToCurrency.setSelection(toPosition);&#13;&#10;&#13;&#10;            if (etFromAmount.getText().toString().isEmpty()) {&#13;&#10;                etFromAmount.setText(&quot;1&quot;);&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private int findCurrencyPosition(String currencyCode) {&#13;&#10;        for (int i = 0; i &lt; currencyList.size(); i++) {&#13;&#10;            if (currencyList.get(i).getCode().equals(currencyCode)) {&#13;&#10;                return i;&#13;&#10;            }&#13;&#10;        }&#13;&#10;        return -1;&#13;&#10;    }&#13;&#10;&#13;&#10;    private void updateExchangeRateDisplay() {&#13;&#10;        Currency fromCurrency = (Currency) spinnerFromCurrency.getSelectedItem();&#13;&#10;        Currency toCurrency = (Currency) spinnerToCurrency.getSelectedItem();&#13;&#10;&#13;&#10;        if (fromCurrency != null &amp;&amp; toCurrency != null) {&#13;&#10;            double rate = performConversion(1.0, fromCurrency.getCode(), toCurrency.getCode());&#13;&#10;            String rateText = &quot;1 &quot; + fromCurrency.getCode() + &quot; = &quot; +&#13;&#10;                             decimalFormat.format(rate) + &quot; &quot; + toCurrency.getCode();&#13;&#10;            tvExchangeRate.setText(rateText);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void updateLastUpdatedTime() {&#13;&#10;        SimpleDateFormat sdf = new SimpleDateFormat(&quot;MMM dd, hh:mm a&quot;, Locale.getDefault());&#13;&#10;        String currentTime = sdf.format(new Date());&#13;&#10;        tvLastUpdated.setText(&quot;Last updated: &quot; + currentTime);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public boolean onOptionsItemSelected(MenuItem item) {&#13;&#10;        if (item.getItemId() == android.R.id.home) {&#13;&#10;            finish();&#13;&#10;            return true;&#13;&#10;        }&#13;&#10;        return super.onOptionsItemSelected(item);&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/abhishek/mycalculator/HistoryActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/abhishek/mycalculator/HistoryActivity.java" />
              <option name="originalContent" value="package com.abhishek.mycalculator;&#10;&#10;import android.content.ClipData;&#10;import android.content.ClipboardManager;&#10;import android.content.Context;&#10;import android.content.SharedPreferences;&#10;import android.os.Bundle;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.widget.Button;&#10;import android.widget.LinearLayout;&#10;import android.widget.Toast;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.google.gson.Gson;&#10;import com.google.gson.reflect.TypeToken;&#10;&#10;import java.lang.reflect.Type;&#10;import java.text.SimpleDateFormat;&#10;import java.util.ArrayList;&#10;import java.util.Date;&#10;import java.util.List;&#10;import java.util.Locale;&#10;&#10;public class HistoryActivity extends AppCompatActivity {&#10;&#10;    private RecyclerView recyclerViewHistory;&#10;    private LinearLayout emptyStateLayout;&#10;    private Button btnClearHistory;&#10;    private HistoryAdapter historyAdapter;&#10;    private List&lt;CalculationHistory&gt; historyList;&#10;    private SharedPreferences sharedPreferences;&#10;    private Gson gson;&#10;&#10;    private static final String PREF_NAME = &quot;CalculatorHistory&quot;;&#10;    private static final String HISTORY_KEY = &quot;history_list&quot;;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_history);&#10;&#10;        initializeViews();&#10;        setupToolbar();&#10;        setupRecyclerView();&#10;        loadHistoryFromPrefs();&#10;        updateUI();&#10;        setupClickListeners();&#10;    }&#10;&#10;    private void initializeViews() {&#10;        recyclerViewHistory = findViewById(R.id.recyclerViewHistory);&#10;        emptyStateLayout = findViewById(R.id.emptyStateLayout);&#10;        btnClearHistory = findViewById(R.id.btnClearHistory);&#10;&#10;        sharedPreferences = getSharedPreferences(PREF_NAME, Context.MODE_PRIVATE);&#10;        gson = new Gson();&#10;        historyList = new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        Toolbar toolbar = findViewById(R.id.toolbar);&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;            getSupportActionBar().setDisplayShowHomeEnabled(true);&#10;        }&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        historyAdapter = new HistoryAdapter(historyList);&#10;        recyclerViewHistory.setLayoutManager(new LinearLayoutManager(this));&#10;        recyclerViewHistory.setAdapter(historyAdapter);&#10;    }&#10;&#10;    private void loadHistoryFromPrefs() {&#10;        String historyJson = sharedPreferences.getString(HISTORY_KEY, &quot;&quot;);&#10;        if (!historyJson.isEmpty()) {&#10;            Type listType = new TypeToken&lt;List&lt;CalculationHistory&gt;&gt;(){}.getType();&#10;            historyList = gson.fromJson(historyJson, listType);&#10;            if (historyList == null) {&#10;                historyList = new ArrayList&lt;&gt;();&#10;            }&#10;        }&#10;    }&#10;&#10;    private void saveHistoryToPrefs() {&#10;        String historyJson = gson.toJson(historyList);&#10;        sharedPreferences.edit().putString(HISTORY_KEY, historyJson).apply();&#10;    }&#10;&#10;    private void updateUI() {&#10;        if (historyList.isEmpty()) {&#10;            recyclerViewHistory.setVisibility(View.GONE);&#10;            emptyStateLayout.setVisibility(View.VISIBLE);&#10;            btnClearHistory.setEnabled(false);&#10;        } else {&#10;            recyclerViewHistory.setVisibility(View.VISIBLE);&#10;            emptyStateLayout.setVisibility(View.GONE);&#10;            btnClearHistory.setEnabled(true);&#10;            historyAdapter.updateHistory(historyList);&#10;        }&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        btnClearHistory.setOnClickListener(v -&gt; clearAllHistory());&#10;    }&#10;&#10;    private void clearAllHistory() {&#10;        historyList.clear();&#10;        saveHistoryToPrefs();&#10;        updateUI();&#10;        Toast.makeText(this, &quot;History cleared&quot;, Toast.LENGTH_SHORT).show();&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(MenuItem item) {&#10;        if (item.getItemId() == android.R.id.home) {&#10;            finish();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;&#10;    // Static method to add calculation to history (called from MainActivity)&#10;    public static void addCalculationToHistory(Context context, String expression, String result) {&#10;        SharedPreferences sharedPreferences = context.getSharedPreferences(PREF_NAME, Context.MODE_PRIVATE);&#10;        Gson gson = new Gson();&#10;&#10;        // Load existing history&#10;        String historyJson = sharedPreferences.getString(HISTORY_KEY, &quot;&quot;);&#10;        List&lt;CalculationHistory&gt; historyList;&#10;&#10;        if (!historyJson.isEmpty()) {&#10;            Type listType = new TypeToken&lt;List&lt;CalculationHistory&gt;&gt;(){}.getType();&#10;            historyList = gson.fromJson(historyJson, listType);&#10;            if (historyList == null) {&#10;                historyList = new ArrayList&lt;&gt;();&#10;            }&#10;        } else {&#10;            historyList = new ArrayList&lt;&gt;();&#10;        }&#10;&#10;        // Create timestamp&#10;        SimpleDateFormat sdf = new SimpleDateFormat(&quot;MMM dd, hh:mm a&quot;, Locale.getDefault());&#10;        String timestamp = sdf.format(new Date());&#10;&#10;        // Add new calculation to the beginning of the list&#10;        CalculationHistory newHistory = new CalculationHistory(expression, result, timestamp, System.currentTimeMillis());&#10;        historyList.add(0, newHistory);&#10;&#10;        // Keep only last 100 calculations&#10;        if (historyList.size() &gt; 100) {&#10;            historyList = historyList.subList(0, 100);&#10;        }&#10;&#10;        // Save updated history&#10;        String updatedHistoryJson = gson.toJson(historyList);&#10;        sharedPreferences.edit().putString(HISTORY_KEY, updatedHistoryJson).apply();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.abhishek.mycalculator;&#10;&#10;import android.content.ClipData;&#10;import android.content.ClipboardManager;&#10;import android.content.Context;&#10;import android.content.SharedPreferences;&#10;import android.os.Bundle;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.widget.Button;&#10;import android.widget.LinearLayout;&#10;import android.widget.Toast;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.google.gson.Gson;&#10;import com.google.gson.reflect.TypeToken;&#10;&#10;import java.lang.reflect.Type;&#10;import java.text.SimpleDateFormat;&#10;import java.util.ArrayList;&#10;import java.util.Date;&#10;import java.util.List;&#10;import java.util.Locale;&#10;&#10;public class HistoryActivity extends AppCompatActivity {&#10;&#10;    private RecyclerView recyclerViewHistory;&#10;    private LinearLayout emptyStateLayout;&#10;    private Button btnClearHistory;&#10;    private HistoryAdapter historyAdapter;&#10;    private List&lt;CalculationHistory&gt; historyList;&#10;    private SharedPreferences sharedPreferences;&#10;    private Gson gson;&#10;&#10;    private static final String PREF_NAME = &quot;CalculatorHistory&quot;;&#10;    private static final String HISTORY_KEY = &quot;history_list&quot;;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_history);&#10;&#10;        initializeViews();&#10;        setupToolbar();&#10;        setupRecyclerView();&#10;        loadHistoryFromPrefs();&#10;        updateUI();&#10;        setupClickListeners();&#10;    }&#10;&#10;    private void initializeViews() {&#10;        recyclerViewHistory = findViewById(R.id.recyclerViewHistory);&#10;        emptyStateLayout = findViewById(R.id.emptyStateLayout);&#10;        btnClearHistory = findViewById(R.id.btnClearHistory);&#10;&#10;        sharedPreferences = getSharedPreferences(PREF_NAME, Context.MODE_PRIVATE);&#10;        gson = new Gson();&#10;        historyList = new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        Toolbar toolbar = findViewById(R.id.toolbar);&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;            getSupportActionBar().setDisplayShowHomeEnabled(true);&#10;            getSupportActionBar().setTitle(&quot;History&quot;);&#10;        }&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        historyAdapter = new HistoryAdapter(historyList);&#10;        recyclerViewHistory.setLayoutManager(new LinearLayoutManager(this));&#10;        recyclerViewHistory.setAdapter(historyAdapter);&#10;    }&#10;&#10;    private void loadHistoryFromPrefs() {&#10;        String historyJson = sharedPreferences.getString(HISTORY_KEY, &quot;&quot;);&#10;        if (!historyJson.isEmpty()) {&#10;            Type listType = new TypeToken&lt;List&lt;CalculationHistory&gt;&gt;(){}.getType();&#10;            historyList = gson.fromJson(historyJson, listType);&#10;            if (historyList == null) {&#10;                historyList = new ArrayList&lt;&gt;();&#10;            }&#10;        }&#10;    }&#10;&#10;    private void saveHistoryToPrefs() {&#10;        String historyJson = gson.toJson(historyList);&#10;        sharedPreferences.edit().putString(HISTORY_KEY, historyJson).apply();&#10;    }&#10;&#10;    private void updateUI() {&#10;        if (historyList.isEmpty()) {&#10;            recyclerViewHistory.setVisibility(View.GONE);&#10;            emptyStateLayout.setVisibility(View.VISIBLE);&#10;            btnClearHistory.setEnabled(false);&#10;        } else {&#10;            recyclerViewHistory.setVisibility(View.VISIBLE);&#10;            emptyStateLayout.setVisibility(View.GONE);&#10;            btnClearHistory.setEnabled(true);&#10;            historyAdapter.updateHistory(historyList);&#10;        }&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        btnClearHistory.setOnClickListener(v -&gt; clearAllHistory());&#10;    }&#10;&#10;    private void clearAllHistory() {&#10;        historyList.clear();&#10;        saveHistoryToPrefs();&#10;        updateUI();&#10;        Toast.makeText(this, &quot;History cleared&quot;, Toast.LENGTH_SHORT).show();&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(MenuItem item) {&#10;        if (item.getItemId() == android.R.id.home) {&#10;            finish();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;&#10;    // Static method to add calculation to history (called from MainActivity)&#10;    public static void addCalculationToHistory(Context context, String expression, String result) {&#10;        SharedPreferences sharedPreferences = context.getSharedPreferences(PREF_NAME, Context.MODE_PRIVATE);&#10;        Gson gson = new Gson();&#10;&#10;        // Load existing history&#10;        String historyJson = sharedPreferences.getString(HISTORY_KEY, &quot;&quot;);&#10;        List&lt;CalculationHistory&gt; historyList;&#10;&#10;        if (!historyJson.isEmpty()) {&#10;            Type listType = new TypeToken&lt;List&lt;CalculationHistory&gt;&gt;(){}.getType();&#10;            historyList = gson.fromJson(historyJson, listType);&#10;            if (historyList == null) {&#10;                historyList = new ArrayList&lt;&gt;();&#10;            }&#10;        } else {&#10;            historyList = new ArrayList&lt;&gt;();&#10;        }&#10;&#10;        // Create timestamp&#10;        SimpleDateFormat sdf = new SimpleDateFormat(&quot;MMM dd, hh:mm a&quot;, Locale.getDefault());&#10;        String timestamp = sdf.format(new Date());&#10;&#10;        // Add new calculation to the beginning of the list&#10;        CalculationHistory newHistory = new CalculationHistory(expression, result, timestamp, System.currentTimeMillis());&#10;        historyList.add(0, newHistory);&#10;&#10;        // Keep only last 100 calculations&#10;        if (historyList.size() &gt; 100) {&#10;            historyList = historyList.subList(0, 100);&#10;        }&#10;&#10;        // Save updated history&#10;        String updatedHistoryJson = gson.toJson(historyList);&#10;        sharedPreferences.edit().putString(HISTORY_KEY, updatedHistoryJson).apply();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/abhishek/mycalculator/MainActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/abhishek/mycalculator/MainActivity.java" />
              <option name="originalContent" value="package com.abhishek.mycalculator;&#10;&#10;import android.animation.AnimatorSet;&#10;import android.animation.ObjectAnimator;&#10;import android.content.ClipData;&#10;import android.content.ClipboardManager;&#10;import android.content.Context;&#10;import android.content.Intent;&#10;import android.content.SharedPreferences;&#10;import android.os.Bundle;&#10;import android.view.GestureDetector;&#10;import android.view.MenuItem;&#10;import android.view.MotionEvent;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.view.animation.AccelerateDecelerateInterpolator;&#10;import android.widget.ArrayAdapter;&#10;import android.widget.Button;&#10;import android.widget.EditText;&#10;import android.widget.LinearLayout;&#10;import android.widget.Spinner;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.activity.EdgeToEdge;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.ActionBarDrawerToggle;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.core.graphics.Insets;&#10;import androidx.core.view.ViewCompat;&#10;import androidx.core.view.WindowInsetsCompat;&#10;import androidx.drawerlayout.widget.DrawerLayout;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.google.android.material.navigation.NavigationView;&#10;import com.google.gson.Gson;&#10;import com.google.gson.reflect.TypeToken;&#10;&#10;import java.lang.reflect.Type;&#10;import java.text.DecimalFormat;&#10;import java.text.NumberFormat;&#10;import java.text.SimpleDateFormat;&#10;import java.util.ArrayList;&#10;import java.util.Date;&#10;import java.util.List;&#10;import java.util.Locale;&#10;&#10;public class MainActivity extends AppCompatActivity implements View.OnClickListener, NavigationView.OnNavigationItemSelectedListener {&#10;&#10;    private TextView tvDisplay, tvPrevious;&#10;    private String currentInput = &quot;&quot;;&#10;    private String operator = &quot;&quot;;&#10;    private double firstOperand = 0;&#10;    private boolean isOperatorPressed = false;&#10;    private boolean isResultShown = false;&#10;    private final DecimalFormat decimalFormat = new DecimalFormat(&quot;#.##########&quot;);&#10;    private final NumberFormat numberFormat = NumberFormat.getNumberInstance(Locale.US);&#10;&#10;    // Navigation drawer components&#10;    private DrawerLayout drawerLayout;&#10;    private NavigationView navigationView;&#10;    private ActionBarDrawerToggle toggle;&#10;    private Toolbar toolbar;&#10;&#10;    // History components&#10;    private RecyclerView recyclerViewHistory;&#10;    private LinearLayout emptyStateLayout;&#10;    private Button btnClearHistory;&#10;    private HistoryAdapter historyAdapter;&#10;    private List&lt;CalculationHistory&gt; historyList;&#10;    private SharedPreferences sharedPreferences;&#10;    private Gson gson;&#10;&#10;    private static final String PREF_NAME = &quot;CalculatorHistory&quot;;&#10;    private static final String HISTORY_KEY = &quot;history_list&quot;;&#10;&#10;    // Currency converter components&#10;    private Spinner spinnerFromCurrency, spinnerToCurrency;&#10;    private EditText etFromAmount;&#10;    private TextView tvToAmount, tvExchangeRate, tvLastUpdated;&#10;    private Button btnConvert, btnSwapCurrencies;&#10;    private Button btnUsdToInr, btnEurToInr, btnGbpToInr, btnInrToUsd;&#10;&#10;    // Currency data&#10;    private String[] currencies = {&quot;USD&quot;, &quot;INR&quot;, &quot;EUR&quot;, &quot;GBP&quot;, &quot;JPY&quot;, &quot;AUD&quot;, &quot;CAD&quot;, &quot;CHF&quot;, &quot;CNY&quot;, &quot;SGD&quot;};&#10;    private String[] currencyNames = {&#10;            &quot;US Dollar (USD)&quot;,&#10;            &quot;Indian Rupee (INR)&quot;,&#10;            &quot;Euro (EUR)&quot;,&#10;            &quot;British Pound (GBP)&quot;,&#10;            &quot;Japanese Yen (JPY)&quot;,&#10;            &quot;Australian Dollar (AUD)&quot;,&#10;            &quot;Canadian Dollar (CAD)&quot;,&#10;            &quot;Swiss Franc (CHF)&quot;,&#10;            &quot;Chinese Yuan (CNY)&quot;,&#10;            &quot;Singapore Dollar (SGD)&quot;&#10;    };&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        EdgeToEdge.enable(this);&#10;        setContentView(R.layout.activity_main);&#10;&#10;        // Initialize navigation drawer components&#10;        setupNavigationDrawer();&#10;&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -&gt; {&#10;            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);&#10;            return insets;&#10;        });&#10;&#10;        initializeViews();&#10;        setupButtonClickListeners();&#10;        setupSwipeGesture();&#10;&#10;        // Initialize history components&#10;        initializeHistoryComponents();&#10;&#10;        // Initialize currency converter components&#10;        initializeCurrencyConverterComponents();&#10;    }&#10;&#10;    private void setupNavigationDrawer() {&#10;        // Initialize toolbar&#10;        toolbar = findViewById(R.id.toolbar);&#10;        setSupportActionBar(toolbar);&#10;&#10;        // Initialize drawer layout and navigation view&#10;        drawerLayout = findViewById(R.id.drawer_layout);&#10;        navigationView = findViewById(R.id.nav_view);&#10;&#10;        // Setup drawer toggle (hamburger icon)&#10;        toggle = new ActionBarDrawerToggle(&#10;                this, drawerLayout, toolbar,&#10;                R.string.navigation_drawer_open, R.string.navigation_drawer_close);&#10;        drawerLayout.addDrawerListener(toggle);&#10;        toggle.syncState();&#10;&#10;        // Set navigation item selected listener&#10;        navigationView.setNavigationItemSelectedListener(this);&#10;    }&#10;&#10;    private void initializeViews() {&#10;        tvDisplay = findViewById(R.id.tvDisplay);&#10;        tvPrevious = findViewById(R.id.tvPrevious);&#10;    }&#10;&#10;    private void setupButtonClickListeners() {&#10;        // Number buttons&#10;        findViewById(R.id.btn0).setOnClickListener(this);&#10;        findViewById(R.id.btn1).setOnClickListener(this);&#10;        findViewById(R.id.btn2).setOnClickListener(this);&#10;        findViewById(R.id.btn3).setOnClickListener(this);&#10;        findViewById(R.id.btn4).setOnClickListener(this);&#10;        findViewById(R.id.btn5).setOnClickListener(this);&#10;        findViewById(R.id.btn6).setOnClickListener(this);&#10;        findViewById(R.id.btn7).setOnClickListener(this);&#10;        findViewById(R.id.btn8).setOnClickListener(this);&#10;        findViewById(R.id.btn9).setOnClickListener(this);&#10;&#10;        // Operator buttons&#10;        findViewById(R.id.btnAdd).setOnClickListener(this);&#10;        findViewById(R.id.btnSubtract).setOnClickListener(this);&#10;        findViewById(R.id.btnMultiply).setOnClickListener(this);&#10;        findViewById(R.id.btnDivide).setOnClickListener(this);&#10;&#10;        // Function buttons&#10;        findViewById(R.id.btnEquals).setOnClickListener(this);&#10;        findViewById(R.id.btnClear).setOnClickListener(this);&#10;        findViewById(R.id.btnDecimal).setOnClickListener(this);&#10;        findViewById(R.id.btnPercent).setOnClickListener(this);&#10;        findViewById(R.id.btnPlusMinus).setOnClickListener(this);&#10;    }&#10;&#10;    private void setupSwipeGesture() {&#10;        GestureDetector gestureDetector = new GestureDetector(this, new GestureDetector.SimpleOnGestureListener() {&#10;            @Override&#10;            public boolean onDoubleTap(MotionEvent e) {&#10;                // Double tap to copy display content&#10;                copyToClipboard();&#10;                return true;&#10;            }&#10;&#10;            @Override&#10;            public boolean onDown(MotionEvent e) {&#10;                return true;&#10;            }&#10;        });&#10;&#10;        tvDisplay.setOnTouchListener(new View.OnTouchListener() {&#10;            private float startX = 0;&#10;            private float startY = 0;&#10;            private static final int MIN_SWIPE_DISTANCE = 50;&#10;&#10;            @Override&#10;            public boolean onTouch(View v, MotionEvent event) {&#10;                v.performClick();&#10;&#10;                // Handle double tap first&#10;                gestureDetector.onTouchEvent(event);&#10;&#10;                switch (event.getAction()) {&#10;                    case MotionEvent.ACTION_DOWN:&#10;                        startX = event.getX();&#10;                        startY = event.getY();&#10;                        return true;&#10;&#10;                    case MotionEvent.ACTION_UP:&#10;                        float endX = event.getX();&#10;                        float endY = event.getY();&#10;&#10;                        float deltaX = endX - startX;&#10;                        float deltaY = endY - startY;&#10;&#10;                        // Check if it's a horizontal swipe (more horizontal than vertical)&#10;                        if (Math.abs(deltaX) &gt; Math.abs(deltaY) &amp;&amp; Math.abs(deltaX) &gt; MIN_SWIPE_DISTANCE) {&#10;                            if (deltaX &gt; 0) {&#10;                                // Left to right swipe - delete one character&#10;                                handleBackspace();&#10;                                return true;&#10;                            }&#10;                        }&#10;                        break;&#10;                }&#10;                return false;&#10;            }&#10;        });&#10;    }&#10;&#10;    private void handleBackspace() {&#10;        if (isResultShown) {&#10;            // If result is shown, clear everything&#10;            handleClearInput();&#10;            return;&#10;        }&#10;&#10;        if (!currentInput.isEmpty()) {&#10;            if (currentInput.length() == 1) {&#10;                // If only one character left, set to &quot;0&quot;&#10;                currentInput = &quot;&quot;;&#10;                tvDisplay.setText(&quot;0&quot;);&#10;            } else {&#10;                // Remove last character&#10;                currentInput = currentInput.substring(0, currentInput.length() - 1);&#10;                tvDisplay.setText(currentInput);&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onClick(View v) {&#10;&#10;        Button button = (Button) v;&#10;        String buttonText = button.getText().toString();&#10;&#10;        int id = v.getId();&#10;&#10;        if (id == R.id.btn0 || id == R.id.btn1 || id == R.id.btn2 || id == R.id.btn3 ||&#10;            id == R.id.btn4 || id == R.id.btn5 || id == R.id.btn6 || id == R.id.btn7 ||&#10;            id == R.id.btn8 || id == R.id.btn9) {&#10;            handleNumberInput(buttonText);&#10;        } else if (id == R.id.btnDecimal) {&#10;            handleDecimalInput();&#10;        } else if (id == R.id.btnAdd || id == R.id.btnSubtract || id == R.id.btnMultiply || id == R.id.btnDivide) {&#10;            handleOperatorInput(buttonText);&#10;        } else if (id == R.id.btnEquals) {&#10;            handleEqualsInput();&#10;        } else if (id == R.id.btnClear) {&#10;            handleClearInput();&#10;        } else if (id == R.id.btnPercent) {&#10;            handlePercentInput();&#10;        } else if (id == R.id.btnPlusMinus) {&#10;            handlePlusMinusInput();&#10;        }&#10;    }&#10;&#10;    private void animateButtonPress(View button) {&#10;        // Scale down and back up for button press effect&#10;        ObjectAnimator scaleDownX = ObjectAnimator.ofFloat(button, &quot;scaleX&quot;, 1.0f, 0.9f);&#10;        ObjectAnimator scaleDownY = ObjectAnimator.ofFloat(button, &quot;scaleY&quot;, 1.0f, 0.9f);&#10;        ObjectAnimator scaleUpX = ObjectAnimator.ofFloat(button, &quot;scaleX&quot;, 0.9f, 1.0f);&#10;        ObjectAnimator scaleUpY = ObjectAnimator.ofFloat(button, &quot;scaleY&quot;, 0.9f, 1.0f);&#10;&#10;        // Alpha animation for press effect&#10;        ObjectAnimator alphaDown = ObjectAnimator.ofFloat(button, &quot;alpha&quot;, 1.0f, 0.7f);&#10;        ObjectAnimator alphaUp = ObjectAnimator.ofFloat(button, &quot;alpha&quot;, 0.7f, 1.0f);&#10;&#10;        AnimatorSet scaleDown = new AnimatorSet();&#10;        scaleDown.playTogether(scaleDownX, scaleDownY, alphaDown);&#10;        scaleDown.setDuration(100);&#10;&#10;        AnimatorSet scaleUp = new AnimatorSet();&#10;        scaleUp.playTogether(scaleUpX, scaleUpY, alphaUp);&#10;        scaleUp.setDuration(100);&#10;&#10;        AnimatorSet fullAnimation = new AnimatorSet();&#10;        fullAnimation.playSequentially(scaleDown, scaleUp);&#10;        fullAnimation.setInterpolator(new AccelerateDecelerateInterpolator());&#10;        fullAnimation.start();&#10;    }&#10;&#10;    private void handleNumberInput(String number) {&#10;        if (isResultShown) {&#10;            currentInput = &quot;&quot;;&#10;            isResultShown = false;&#10;        }&#10;&#10;        if (currentInput.equals(&quot;0&quot;) &amp;&amp; !number.equals(&quot;0&quot;)) {&#10;            currentInput = number;&#10;        } else if (!currentInput.equals(&quot;0&quot;)) {&#10;            currentInput += number;&#10;        }&#10;&#10;        // Display with comma formatting for input&#10;        String displayText = formatInputNumber(currentInput);&#10;        tvDisplay.setText(displayText);&#10;        isOperatorPressed = false;&#10;    }&#10;&#10;    private void handleDecimalInput() {&#10;        if (isResultShown) {&#10;            currentInput = &quot;0&quot;;&#10;            isResultShown = false;&#10;        }&#10;&#10;        if (currentInput.isEmpty()) {&#10;            currentInput = &quot;0&quot;;&#10;        }&#10;&#10;        if (!currentInput.contains(&quot;.&quot;)) {&#10;            currentInput += &quot;.&quot;;&#10;            tvDisplay.setText(currentInput);&#10;        }&#10;        isOperatorPressed = false;&#10;    }&#10;&#10;    private void handleOperatorInput(String op) {&#10;        if (!currentInput.isEmpty() &amp;&amp; !isOperatorPressed) {&#10;            if (!operator.isEmpty()) {&#10;                calculateResult();&#10;            } else {&#10;                firstOperand = Double.parseDouble(currentInput);&#10;            }&#10;        }&#10;&#10;        operator = convertOperatorSymbol(op);&#10;        isOperatorPressed = true;&#10;        isResultShown = false;&#10;&#10;        String displayText = formatNumber(firstOperand) + &quot; &quot; + op;&#10;        tvPrevious.setText(displayText);&#10;        currentInput = &quot;&quot;;&#10;    }&#10;&#10;    private void handleEqualsInput() {&#10;        if (!operator.isEmpty() &amp;&amp; !currentInput.isEmpty()) {&#10;            calculateResult();&#10;            tvPrevious.setText(&quot;&quot;);&#10;            operator = &quot;&quot;;&#10;            isResultShown = true;&#10;        }&#10;    }&#10;&#10;    private void handleClearInput() {&#10;        currentInput = &quot;&quot;;&#10;        operator = &quot;&quot;;&#10;        firstOperand = 0;&#10;        isOperatorPressed = false;&#10;        isResultShown = false;&#10;        tvDisplay.setText(&quot;0&quot;);&#10;        tvPrevious.setText(&quot;&quot;);&#10;    }&#10;&#10;    private void handlePercentInput() {&#10;        if (!currentInput.isEmpty()) {&#10;            double value = Double.parseDouble(currentInput);&#10;&#10;            // If there's a pending operation and first operand exists&#10;            if (!operator.isEmpty() &amp;&amp; firstOperand != 0) {&#10;                // Calculate percentage of the first operand&#10;                value = (firstOperand * value) / 100;&#10;            } else {&#10;                // Simple percentage conversion&#10;                value = value / 100;&#10;            }&#10;&#10;            currentInput = String.valueOf(value);&#10;            tvDisplay.setText(formatNumber(value));&#10;            isResultShown = false; // Allow further operations&#10;        }&#10;    }&#10;&#10;    private void handlePlusMinusInput() {&#10;        if (!currentInput.isEmpty() &amp;&amp; !currentInput.equals(&quot;0&quot;)) {&#10;            if (currentInput.startsWith(&quot;-&quot;)) {&#10;                currentInput = currentInput.substring(1);&#10;            } else {&#10;                currentInput = &quot;-&quot; + currentInput;&#10;            }&#10;            tvDisplay.setText(currentInput);&#10;        }&#10;    }&#10;&#10;    private void calculateResult() {&#10;        if (currentInput.isEmpty()) return;&#10;&#10;        double secondOperand = Double.parseDouble(currentInput);&#10;        double result = 0;&#10;        String expression = &quot;&quot;;&#10;&#10;        try {&#10;            switch (operator) {&#10;                case &quot;+&quot;:&#10;                    result = firstOperand + secondOperand;&#10;                    expression = formatNumber(firstOperand) + &quot; + &quot; + formatNumber(secondOperand);&#10;                    break;&#10;                case &quot;-&quot;:&#10;                    result = firstOperand - secondOperand;&#10;                    expression = formatNumber(firstOperand) + &quot; - &quot; + formatNumber(secondOperand);&#10;                    break;&#10;                case &quot;*&quot;:&#10;                    result = firstOperand * secondOperand;&#10;                    expression = formatNumber(firstOperand) + &quot; × &quot; + formatNumber(secondOperand);&#10;                    break;&#10;                case &quot;/&quot;:&#10;                    if (secondOperand != 0) {&#10;                        result = firstOperand / secondOperand;&#10;                        expression = formatNumber(firstOperand) + &quot; ÷ &quot; + formatNumber(secondOperand);&#10;                    } else {&#10;                        tvDisplay.setText(&quot;Error&quot;);&#10;                        return;&#10;                    }&#10;                    break;&#10;            }&#10;&#10;            firstOperand = result;&#10;            currentInput = String.valueOf(result);&#10;            String formattedResult = formatNumber(result);&#10;            tvDisplay.setText(formattedResult);&#10;&#10;            // Save calculation to history&#10;            addCalculationToHistory(expression, formattedResult);&#10;&#10;        } catch (Exception e) {&#10;            tvDisplay.setText(&quot;Error&quot;);&#10;            handleClearInput();&#10;        }&#10;    }&#10;&#10;    private String convertOperatorSymbol(String symbol) {&#10;        switch (symbol) {&#10;            case &quot;÷&quot;:&#10;                return &quot;/&quot;;&#10;            case &quot;×&quot;:&#10;                return &quot;*&quot;;&#10;            case &quot;−&quot;:&#10;                return &quot;-&quot;;&#10;            default:&#10;                return symbol;&#10;        }&#10;    }&#10;&#10;    private void copyToClipboard() {&#10;        String textToCopy = tvDisplay.getText().toString();&#10;        if (!textToCopy.isEmpty() &amp;&amp; !textToCopy.equals(&quot;0&quot;)) {&#10;            ClipboardManager clipboard = (ClipboardManager) getSystemService(Context.CLIPBOARD_SERVICE);&#10;            ClipData clip = ClipData.newPlainText(&quot;Calculator Result&quot;, textToCopy);&#10;            clipboard.setPrimaryClip(clip);&#10;&#10;            // Show copy animation&#10;            animateCopy();&#10;&#10;            Toast.makeText(this, &quot;Copied: &quot; + textToCopy, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    private void animateCopy() {&#10;        // Scale animation for copy feedback&#10;        ObjectAnimator scaleX = ObjectAnimator.ofFloat(tvDisplay, &quot;scaleX&quot;, 1.0f, 1.1f, 1.0f);&#10;        ObjectAnimator scaleY = ObjectAnimator.ofFloat(tvDisplay, &quot;scaleY&quot;, 1.0f, 1.1f, 1.0f);&#10;&#10;        AnimatorSet animatorSet = new AnimatorSet();&#10;        animatorSet.playTogether(scaleX, scaleY);&#10;        animatorSet.setDuration(300);&#10;        animatorSet.setInterpolator(new AccelerateDecelerateInterpolator());&#10;        animatorSet.start();&#10;    }&#10;&#10;    private String formatInputNumber(String input) {&#10;        try {&#10;            // Remove any existing commas first&#10;            String cleanInput = input.replace(&quot;,&quot;, &quot;&quot;);&#10;&#10;            if (cleanInput.contains(&quot;.&quot;)) {&#10;                // Handle decimal numbers&#10;                String[] parts = cleanInput.split(&quot;\\.&quot;);&#10;                String wholePart = parts[0];&#10;                String decimalPart = parts[1];&#10;&#10;                if (wholePart.length() &gt;= 4) {&#10;                    long wholeNumber = Long.parseLong(wholePart);&#10;                    return numberFormat.format(wholeNumber) + &quot;.&quot; + decimalPart;&#10;                }&#10;                return cleanInput;&#10;            } else {&#10;                // Handle whole numbers&#10;                if (cleanInput.length() &gt;= 4) {&#10;                    long number = Long.parseLong(cleanInput);&#10;                    return numberFormat.format(number);&#10;                }&#10;                return cleanInput;&#10;            }&#10;        } catch (Exception e) {&#10;            return input;&#10;        }&#10;    }&#10;&#10;    private String formatNumber(double number) {&#10;        if (number == (long) number) {&#10;            // For whole numbers, use comma separator for thousands&#10;            long longNumber = (long) number;&#10;            if (Math.abs(longNumber) &gt;= 1000) {&#10;                return numberFormat.format(longNumber);&#10;            } else {&#10;                return String.valueOf(longNumber);&#10;            }&#10;        } else {&#10;            // For decimal numbers&#10;            if (Math.abs(number) &gt;= 1000) {&#10;                numberFormat.setMaximumFractionDigits(10);&#10;                numberFormat.setMinimumFractionDigits(0);&#10;                return numberFormat.format(number);&#10;            } else {&#10;                String formatted = decimalFormat.format(number);&#10;                return formatted;&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean onNavigationItemSelected(@NonNull MenuItem item) {&#10;        int id = item.getItemId();&#10;&#10;        if (id == R.id.nav_calculator) {&#10;            showCalculatorView();&#10;        } else if (id == R.id.nav_currency_converter) {&#10;            showCurrencyConverterView();&#10;        } else if (id == R.id.nav_history) {&#10;            showHistoryView();&#10;        }&#10;&#10;        // Close drawer after item selection&#10;        drawerLayout.closeDrawers();&#10;        return true;&#10;    }&#10;&#10;    @Override&#10;    public void onBackPressed() {&#10;        // First priority: Check if navigation drawer is open&#10;        if (drawerLayout.isDrawerOpen(navigationView)) {&#10;            drawerLayout.closeDrawers();&#10;            return;&#10;        }&#10;&#10;        // Second priority: Check if currency converter content is visible&#10;        LinearLayout currencyContent = findViewById(R.id.currency_converter_content);&#10;        if (currencyContent != null &amp;&amp; currencyContent.getVisibility() == View.VISIBLE) {&#10;            // If currency converter is visible and drawer is closed, go back to calculator&#10;            showCalculatorView();&#10;            return;&#10;        }&#10;&#10;        // Third priority: Check if history content is visible&#10;        LinearLayout historyContent = findViewById(R.id.history_content);&#10;        if (historyContent != null &amp;&amp; historyContent.getVisibility() == View.VISIBLE) {&#10;            // If history is visible and drawer is closed, go back to calculator&#10;            showCalculatorView();&#10;            return;&#10;        }&#10;&#10;        // Last: Default back press (close app)&#10;        super.onBackPressed();&#10;    }&#10;&#10;    private void showCurrencyConverterView() {&#10;        // Hide calculator and history content&#10;        LinearLayout calculatorContent = findViewById(R.id.calculator_content);&#10;        if (calculatorContent != null) {&#10;            calculatorContent.setVisibility(View.GONE);&#10;        }&#10;&#10;        LinearLayout historyContent = findViewById(R.id.history_content);&#10;        if (historyContent != null) {&#10;            historyContent.setVisibility(View.GONE);&#10;        }&#10;&#10;        // Show currency converter content without animation&#10;        LinearLayout currencyContent = findViewById(R.id.currency_converter_content);&#10;        if (currencyContent != null) {&#10;            currencyContent.setVisibility(View.VISIBLE);&#10;        }&#10;&#10;        // Update toolbar title&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Currency Converter&quot;);&#10;        }&#10;&#10;        // Update navigation menu selection to currency converter&#10;        navigationView.setCheckedItem(R.id.nav_currency_converter);&#10;    }&#10;&#10;    private void showHistoryView() {&#10;        // Hide calculator and currency converter content&#10;        LinearLayout calculatorContent = findViewById(R.id.calculator_content);&#10;        if (calculatorContent != null) {&#10;            calculatorContent.setVisibility(View.GONE);&#10;        }&#10;&#10;        LinearLayout currencyContent = findViewById(R.id.currency_converter_content);&#10;        if (currencyContent != null) {&#10;            currencyContent.setVisibility(View.GONE);&#10;        }&#10;&#10;        // Show history content without animation&#10;        LinearLayout historyContent = findViewById(R.id.history_content);&#10;        if (historyContent != null) {&#10;            historyContent.setVisibility(View.VISIBLE);&#10;            loadAndDisplayHistory();&#10;        }&#10;&#10;        // Update toolbar title&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;History&quot;);&#10;        }&#10;&#10;        // Update navigation menu selection to history&#10;        navigationView.setCheckedItem(R.id.nav_history);&#10;    }&#10;&#10;    private void showCalculatorView() {&#10;        // Show calculator content and hide other content&#10;        LinearLayout calculatorContent = findViewById(R.id.calculator_content);&#10;        if (calculatorContent != null) {&#10;            calculatorContent.setVisibility(View.VISIBLE);&#10;        }&#10;&#10;        LinearLayout historyContent = findViewById(R.id.history_content);&#10;        if (historyContent != null) {&#10;            historyContent.setVisibility(View.GONE);&#10;        }&#10;&#10;        LinearLayout currencyContent = findViewById(R.id.currency_converter_content);&#10;        if (currencyContent != null) {&#10;            currencyContent.setVisibility(View.GONE);&#10;        }&#10;&#10;        // Update navigation menu selection to calculator&#10;        navigationView.setCheckedItem(R.id.nav_calculator);&#10;    }&#10;&#10;    private void initializeHistoryComponents() {&#10;        // Initialize RecyclerView for history&#10;        recyclerViewHistory = findViewById(R.id.recyclerViewHistory);&#10;        recyclerViewHistory.setLayoutManager(new LinearLayoutManager(this));&#10;&#10;        emptyStateLayout = findViewById(R.id.emptyStateLayout);&#10;        btnClearHistory = findViewById(R.id.btnClearHistory);&#10;&#10;        // Setup SharedPreferences and Gson&#10;        sharedPreferences = getSharedPreferences(PREF_NAME, MODE_PRIVATE);&#10;        gson = new Gson();&#10;&#10;        // Load history from SharedPreferences&#10;        loadHistory();&#10;&#10;        // Setup adapter&#10;        historyAdapter = new HistoryAdapter(historyList);&#10;        recyclerViewHistory.setAdapter(historyAdapter);&#10;&#10;        // Show or hide empty state&#10;        updateEmptyState();&#10;    }&#10;&#10;    private void loadHistory() {&#10;        // Load history list from SharedPreferences&#10;        String json = sharedPreferences.getString(HISTORY_KEY, null);&#10;        Type type = new TypeToken&lt;ArrayList&lt;CalculationHistory&gt;&gt;() {}.getType();&#10;        historyList = gson.fromJson(json, type);&#10;&#10;        if (historyList == null) {&#10;            historyList = new ArrayList&lt;&gt;();&#10;        }&#10;    }&#10;&#10;    private void updateEmptyState() {&#10;        if (historyList.isEmpty()) {&#10;            emptyStateLayout.setVisibility(View.VISIBLE);&#10;            recyclerViewHistory.setVisibility(View.GONE);&#10;        } else {&#10;            emptyStateLayout.setVisibility(View.GONE);&#10;            recyclerViewHistory.setVisibility(View.VISIBLE);&#10;        }&#10;    }&#10;&#10;    private void loadAndDisplayHistory() {&#10;        // Reload history from SharedPreferences&#10;        loadHistory();&#10;&#10;        // Update adapter with new data&#10;        if (historyAdapter != null) {&#10;            historyAdapter.updateHistory(historyList);&#10;        }&#10;&#10;        // Update empty state&#10;        updateEmptyState();&#10;&#10;        // Setup clear history button click listener&#10;        if (btnClearHistory != null) {&#10;            btnClearHistory.setOnClickListener(v -&gt; clearAllHistory());&#10;        }&#10;    }&#10;&#10;    private void clearAllHistory() {&#10;        historyList.clear();&#10;        saveHistory();&#10;        historyAdapter.updateHistory(historyList);&#10;        updateEmptyState();&#10;        Toast.makeText(this, &quot;History cleared&quot;, Toast.LENGTH_SHORT).show();&#10;    }&#10;&#10;    private void saveHistory() {&#10;        SharedPreferences.Editor editor = sharedPreferences.edit();&#10;        String json = gson.toJson(historyList);&#10;        editor.putString(HISTORY_KEY, json);&#10;        editor.apply();&#10;    }&#10;&#10;    // Method to add calculation to history (called when equals is pressed)&#10;    public void addCalculationToHistory(String expression, String result) {&#10;        // Create timestamp&#10;        SimpleDateFormat sdf = new SimpleDateFormat(&quot;MMM dd, hh:mm a&quot;, Locale.getDefault());&#10;        String timestamp = sdf.format(new Date());&#10;&#10;        // Create new history entry&#10;        CalculationHistory newHistory = new CalculationHistory(expression, result, timestamp, System.currentTimeMillis());&#10;&#10;        // Add to beginning of list&#10;        historyList.add(0, newHistory);&#10;&#10;        // Keep only last 100 calculations&#10;        if (historyList.size() &gt; 100) {&#10;            historyList = historyList.subList(0, 100);&#10;        }&#10;&#10;        // Save to SharedPreferences&#10;        saveHistory();&#10;    }&#10;&#10;    private void initializeCurrencyConverterComponents() {&#10;        spinnerFromCurrency = findViewById(R.id.spinnerFromCurrency);&#10;        spinnerToCurrency = findViewById(R.id.spinnerToCurrency);&#10;        etFromAmount = findViewById(R.id.etFromAmount);&#10;        tvToAmount = findViewById(R.id.tvToAmount);&#10;        tvExchangeRate = findViewById(R.id.tvExchangeRate);&#10;        tvLastUpdated = findViewById(R.id.tvLastUpdated);&#10;        btnConvert = findViewById(R.id.btnConvert);&#10;        btnSwapCurrencies = findViewById(R.id.btnSwapCurrencies);&#10;        btnUsdToInr = findViewById(R.id.btnUsdToInr);&#10;        btnEurToInr = findViewById(R.id.btnEurToInr);&#10;        btnGbpToInr = findViewById(R.id.btnGbpToInr);&#10;        btnInrToUsd = findViewById(R.id.btnInrToUsd);&#10;&#10;        // Setup currency spinners with custom layout for better visibility&#10;        ArrayAdapter&lt;String&gt; currencyAdapter = new ArrayAdapter&lt;String&gt;(this, android.R.layout.simple_spinner_item, currencyNames) {&#10;            @Override&#10;            public View getView(int position, View convertView, ViewGroup parent) {&#10;                View view = super.getView(position, convertView, parent);&#10;                TextView textView = (TextView) view;&#10;                textView.setTextColor(getResources().getColor(R.color.display_text)); // White text&#10;                textView.setTextSize(16);&#10;                return view;&#10;            }&#10;&#10;            @Override&#10;            public View getDropDownView(int position, View convertView, ViewGroup parent) {&#10;                View view = super.getDropDownView(position, convertView, parent);&#10;                TextView textView = (TextView) view;&#10;                textView.setTextColor(getResources().getColor(R.color.display_text)); // White text&#10;                textView.setBackgroundColor(getResources().getColor(R.color.background_black)); // Black background&#10;                textView.setPadding(20, 20, 20, 20);&#10;                textView.setTextSize(16);&#10;                return view;&#10;            }&#10;        };&#10;&#10;        currencyAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spinnerFromCurrency.setAdapter(currencyAdapter);&#10;&#10;        // Create separate adapter for &quot;To&quot; spinner&#10;        ArrayAdapter&lt;String&gt; currencyAdapter2 = new ArrayAdapter&lt;String&gt;(this, android.R.layout.simple_spinner_item, currencyNames) {&#10;            @Override&#10;            public View getView(int position, View convertView, ViewGroup parent) {&#10;                View view = super.getView(position, convertView, parent);&#10;                TextView textView = (TextView) view;&#10;                textView.setTextColor(getResources().getColor(R.color.display_text)); // White text&#10;                textView.setTextSize(16);&#10;                return view;&#10;            }&#10;&#10;            @Override&#10;            public View getDropDownView(int position, View convertView, ViewGroup parent) {&#10;                View view = super.getDropDownView(position, convertView, parent);&#10;                TextView textView = (TextView) view;&#10;                textView.setTextColor(getResources().getColor(R.color.display_text)); // White text&#10;                textView.setBackgroundColor(getResources().getColor(R.color.background_black)); // Black background&#10;                textView.setPadding(20, 20, 20, 20);&#10;                textView.setTextSize(16);&#10;                return view;&#10;            }&#10;        };&#10;&#10;        currencyAdapter2.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spinnerToCurrency.setAdapter(currencyAdapter2);&#10;&#10;        // Set default selection to first currency&#10;        spinnerFromCurrency.setSelection(0); // USD&#10;        spinnerToCurrency.setSelection(1);   // INR&#10;&#10;        // Setup Convert button click listener&#10;        btnConvert.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                performCurrencyConversion();&#10;            }&#10;        });&#10;&#10;        // Setup Swap button click listener&#10;        btnSwapCurrencies.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                swapCurrencies();&#10;            }&#10;        });&#10;&#10;        // Setup popular conversion buttons&#10;        btnUsdToInr.setOnClickListener(v -&gt; performDirectConversion(&quot;USD&quot;, &quot;INR&quot;));&#10;        btnEurToInr.setOnClickListener(v -&gt; performDirectConversion(&quot;EUR&quot;, &quot;INR&quot;));&#10;        btnGbpToInr.setOnClickListener(v -&gt; performDirectConversion(&quot;GBP&quot;, &quot;INR&quot;));&#10;        btnInrToUsd.setOnClickListener(v -&gt; performDirectConversion(&quot;INR&quot;, &quot;USD&quot;));&#10;    }&#10;&#10;    private void performCurrencyConversion() {&#10;        try {&#10;            String amountText = etFromAmount.getText().toString().trim();&#10;            if (amountText.isEmpty()) {&#10;                Toast.makeText(this, &quot;Please enter amount&quot;, Toast.LENGTH_SHORT).show();&#10;                return;&#10;            }&#10;&#10;            double amount = Double.parseDouble(amountText);&#10;            int fromPosition = spinnerFromCurrency.getSelectedItemPosition();&#10;            int toPosition = spinnerToCurrency.getSelectedItemPosition();&#10;&#10;            String fromCurrency = currencies[fromPosition];&#10;            String toCurrency = currencies[toPosition];&#10;&#10;            // Sample exchange rates (in real app, you'd fetch from API)&#10;            double convertedAmount = convertCurrency(amount, fromCurrency, toCurrency);&#10;&#10;            // Display result&#10;            tvToAmount.setText(String.format(&quot;%.2f&quot;, convertedAmount));&#10;&#10;            // Update exchange rate display&#10;            double rate = getExchangeRate(fromCurrency, toCurrency);&#10;            tvExchangeRate.setText(String.format(&quot;1 %s = %.4f %s&quot;, fromCurrency, rate, toCurrency));&#10;&#10;            // Update timestamp&#10;            tvLastUpdated.setText(&quot;Last updated: Just now&quot;);&#10;&#10;        } catch (NumberFormatException e) {&#10;            Toast.makeText(this, &quot;Please enter valid amount&quot;, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    private void swapCurrencies() {&#10;        int fromPosition = spinnerFromCurrency.getSelectedItemPosition();&#10;        int toPosition = spinnerToCurrency.getSelectedItemPosition();&#10;&#10;        // Swap selections&#10;        spinnerFromCurrency.setSelection(toPosition);&#10;        spinnerToCurrency.setSelection(fromPosition);&#10;&#10;        // If there's amount entered, perform conversion automatically&#10;        String amountText = etFromAmount.getText().toString().trim();&#10;        if (!amountText.isEmpty()) {&#10;            performCurrencyConversion();&#10;        }&#10;    }&#10;&#10;    private void performDirectConversion(String fromCurrency, String toCurrency) {&#10;        spinnerFromCurrency.setSelection(getIndex(fromCurrency));&#10;        spinnerToCurrency.setSelection(getIndex(toCurrency));&#10;&#10;        // Perform conversion&#10;        performCurrencyConversion();&#10;    }&#10;&#10;    private double convertCurrency(double amount, String fromCurrency, String toCurrency) {&#10;        if (fromCurrency.equals(toCurrency)) {&#10;            return amount;&#10;        }&#10;&#10;        double rate = getExchangeRate(fromCurrency, toCurrency);&#10;        return amount * rate;&#10;    }&#10;&#10;    private double getExchangeRate(String fromCurrency, String toCurrency) {&#10;        // Sample exchange rates (in real app, you'd fetch from API)&#10;        // All rates are relative to USD&#10;        double[][] exchangeRates = {&#10;            // USD, INR, EUR, GBP, JPY, AUD, CAD, CHF, CNY, SGD&#10;            {1.0, 83.15, 0.92, 0.79, 149.50, 1.52, 1.36, 0.89, 7.23, 1.35}, // USD&#10;            {0.012, 1.0, 0.011, 0.0095, 1.80, 0.018, 0.016, 0.011, 0.087, 0.016}, // INR&#10;            {1.09, 90.45, 1.0, 0.86, 162.80, 1.65, 1.48, 0.97, 7.87, 1.47}, // EUR&#10;            {1.27, 105.38, 1.16, 1.0, 189.24, 1.92, 1.72, 1.13, 9.15, 1.71}, // GBP&#10;            {0.0067, 0.56, 0.0061, 0.0053, 1.0, 0.010, 0.0091, 0.0060, 0.048, 0.0090}, // JPY&#10;            {0.66, 54.70, 0.61, 0.52, 98.36, 1.0, 0.89, 0.59, 4.76, 0.89}, // AUD&#10;            {0.74, 61.14, 0.68, 0.58, 109.93, 1.12, 1.0, 0.66, 5.32, 0.99}, // CAD&#10;            {1.12, 93.48, 1.04, 0.89, 167.98, 1.70, 1.52, 1.0, 8.12, 1.52}, // CHF&#10;            {0.138, 11.50, 0.127, 0.109, 20.68, 0.21, 0.188, 0.123, 1.0, 0.187}, // CNY&#10;            {0.74, 61.59, 0.68, 0.58, 110.74, 1.13, 1.01, 0.66, 5.36, 1.0}  // SGD&#10;        };&#10;&#10;        int fromIndex = getIndex(fromCurrency);&#10;        int toIndex = getIndex(toCurrency);&#10;&#10;        if (fromIndex == -1 || toIndex == -1) {&#10;            return 1.0; // Default rate if currency not found&#10;        }&#10;&#10;        return exchangeRates[fromIndex][toIndex];&#10;    }&#10;&#10;    private int getIndex(String currency) {&#10;        for (int i = 0; i &lt; currencies.length; i++) {&#10;            if (currencies[i].equals(currency)) {&#10;                return i;&#10;            }&#10;        }&#10;        return -1;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.abhishek.mycalculator;&#10;&#10;import android.animation.AnimatorSet;&#10;import android.animation.ObjectAnimator;&#10;import android.content.ClipData;&#10;import android.content.ClipboardManager;&#10;import android.content.Context;&#10;import android.content.Intent;&#10;import android.content.SharedPreferences;&#10;import android.os.Bundle;&#10;import android.view.GestureDetector;&#10;import android.view.MenuItem;&#10;import android.view.MotionEvent;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.view.animation.AccelerateDecelerateInterpolator;&#10;import android.widget.ArrayAdapter;&#10;import android.widget.Button;&#10;import android.widget.EditText;&#10;import android.widget.LinearLayout;&#10;import android.widget.Spinner;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.activity.EdgeToEdge;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.ActionBarDrawerToggle;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.core.graphics.Insets;&#10;import androidx.core.view.ViewCompat;&#10;import androidx.core.view.WindowInsetsCompat;&#10;import androidx.drawerlayout.widget.DrawerLayout;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.google.android.material.navigation.NavigationView;&#10;import com.google.gson.Gson;&#10;import com.google.gson.reflect.TypeToken;&#10;&#10;import java.lang.reflect.Type;&#10;import java.text.DecimalFormat;&#10;import java.text.NumberFormat;&#10;import java.text.SimpleDateFormat;&#10;import java.util.ArrayList;&#10;import java.util.Date;&#10;import java.util.List;&#10;import java.util.Locale;&#10;&#10;public class MainActivity extends AppCompatActivity implements View.OnClickListener, NavigationView.OnNavigationItemSelectedListener {&#10;&#10;    private TextView tvDisplay, tvPrevious;&#10;    private String currentInput = &quot;&quot;;&#10;    private String operator = &quot;&quot;;&#10;    private double firstOperand = 0;&#10;    private boolean isOperatorPressed = false;&#10;    private boolean isResultShown = false;&#10;    private final DecimalFormat decimalFormat = new DecimalFormat(&quot;#.##########&quot;);&#10;    private final NumberFormat numberFormat = NumberFormat.getNumberInstance(Locale.US);&#10;&#10;    // Navigation drawer components&#10;    private DrawerLayout drawerLayout;&#10;    private NavigationView navigationView;&#10;    private ActionBarDrawerToggle toggle;&#10;    private Toolbar toolbar;&#10;&#10;    // History components&#10;    private RecyclerView recyclerViewHistory;&#10;    private LinearLayout emptyStateLayout;&#10;    private Button btnClearHistory;&#10;    private HistoryAdapter historyAdapter;&#10;    private List&lt;CalculationHistory&gt; historyList;&#10;    private SharedPreferences sharedPreferences;&#10;    private Gson gson;&#10;&#10;    private static final String PREF_NAME = &quot;CalculatorHistory&quot;;&#10;    private static final String HISTORY_KEY = &quot;history_list&quot;;&#10;&#10;    // Currency converter components&#10;    private Spinner spinnerFromCurrency, spinnerToCurrency;&#10;    private EditText etFromAmount;&#10;    private TextView tvToAmount, tvExchangeRate, tvLastUpdated;&#10;    private Button btnConvert, btnSwapCurrencies;&#10;    private Button btnUsdToInr, btnEurToInr, btnGbpToInr, btnInrToUsd;&#10;&#10;    // Currency data&#10;    private String[] currencies = {&quot;USD&quot;, &quot;INR&quot;, &quot;EUR&quot;, &quot;GBP&quot;, &quot;JPY&quot;, &quot;AUD&quot;, &quot;CAD&quot;, &quot;CHF&quot;, &quot;CNY&quot;, &quot;SGD&quot;};&#10;    private String[] currencyNames = {&#10;            &quot;US Dollar (USD)&quot;,&#10;            &quot;Indian Rupee (INR)&quot;,&#10;            &quot;Euro (EUR)&quot;,&#10;            &quot;British Pound (GBP)&quot;,&#10;            &quot;Japanese Yen (JPY)&quot;,&#10;            &quot;Australian Dollar (AUD)&quot;,&#10;            &quot;Canadian Dollar (CAD)&quot;,&#10;            &quot;Swiss Franc (CHF)&quot;,&#10;            &quot;Chinese Yuan (CNY)&quot;,&#10;            &quot;Singapore Dollar (SGD)&quot;&#10;    };&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        EdgeToEdge.enable(this);&#10;        setContentView(R.layout.activity_main);&#10;&#10;        // Initialize navigation drawer components&#10;        setupNavigationDrawer();&#10;&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -&gt; {&#10;            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);&#10;            return insets;&#10;        });&#10;&#10;        initializeViews();&#10;        setupButtonClickListeners();&#10;        setupSwipeGesture();&#10;&#10;        // Initialize history components&#10;        initializeHistoryComponents();&#10;&#10;        // Initialize currency converter components&#10;        initializeCurrencyConverterComponents();&#10;    }&#10;&#10;    private void setupNavigationDrawer() {&#10;        // Initialize toolbar&#10;        toolbar = findViewById(R.id.toolbar);&#10;        setSupportActionBar(toolbar);&#10;&#10;        // Initialize drawer layout and navigation view&#10;        drawerLayout = findViewById(R.id.drawer_layout);&#10;        navigationView = findViewById(R.id.nav_view);&#10;&#10;        // Setup drawer toggle (hamburger icon)&#10;        toggle = new ActionBarDrawerToggle(&#10;                this, drawerLayout, toolbar,&#10;                R.string.navigation_drawer_open, R.string.navigation_drawer_close);&#10;        drawerLayout.addDrawerListener(toggle);&#10;        toggle.syncState();&#10;&#10;        // Set navigation item selected listener&#10;        navigationView.setNavigationItemSelectedListener(this);&#10;    }&#10;&#10;    private void initializeViews() {&#10;        tvDisplay = findViewById(R.id.tvDisplay);&#10;        tvPrevious = findViewById(R.id.tvPrevious);&#10;    }&#10;&#10;    private void setupButtonClickListeners() {&#10;        // Number buttons&#10;        findViewById(R.id.btn0).setOnClickListener(this);&#10;        findViewById(R.id.btn1).setOnClickListener(this);&#10;        findViewById(R.id.btn2).setOnClickListener(this);&#10;        findViewById(R.id.btn3).setOnClickListener(this);&#10;        findViewById(R.id.btn4).setOnClickListener(this);&#10;        findViewById(R.id.btn5).setOnClickListener(this);&#10;        findViewById(R.id.btn6).setOnClickListener(this);&#10;        findViewById(R.id.btn7).setOnClickListener(this);&#10;        findViewById(R.id.btn8).setOnClickListener(this);&#10;        findViewById(R.id.btn9).setOnClickListener(this);&#10;&#10;        // Operator buttons&#10;        findViewById(R.id.btnAdd).setOnClickListener(this);&#10;        findViewById(R.id.btnSubtract).setOnClickListener(this);&#10;        findViewById(R.id.btnMultiply).setOnClickListener(this);&#10;        findViewById(R.id.btnDivide).setOnClickListener(this);&#10;&#10;        // Function buttons&#10;        findViewById(R.id.btnEquals).setOnClickListener(this);&#10;        findViewById(R.id.btnClear).setOnClickListener(this);&#10;        findViewById(R.id.btnDecimal).setOnClickListener(this);&#10;        findViewById(R.id.btnPercent).setOnClickListener(this);&#10;        findViewById(R.id.btnPlusMinus).setOnClickListener(this);&#10;    }&#10;&#10;    private void setupSwipeGesture() {&#10;        GestureDetector gestureDetector = new GestureDetector(this, new GestureDetector.SimpleOnGestureListener() {&#10;            @Override&#10;            public boolean onDoubleTap(MotionEvent e) {&#10;                // Double tap to copy display content&#10;                copyToClipboard();&#10;                return true;&#10;            }&#10;&#10;            @Override&#10;            public boolean onDown(MotionEvent e) {&#10;                return true;&#10;            }&#10;        });&#10;&#10;        tvDisplay.setOnTouchListener(new View.OnTouchListener() {&#10;            private float startX = 0;&#10;            private float startY = 0;&#10;            private static final int MIN_SWIPE_DISTANCE = 50;&#10;&#10;            @Override&#10;            public boolean onTouch(View v, MotionEvent event) {&#10;                v.performClick();&#10;&#10;                // Handle double tap first&#10;                gestureDetector.onTouchEvent(event);&#10;&#10;                switch (event.getAction()) {&#10;                    case MotionEvent.ACTION_DOWN:&#10;                        startX = event.getX();&#10;                        startY = event.getY();&#10;                        return true;&#10;&#10;                    case MotionEvent.ACTION_UP:&#10;                        float endX = event.getX();&#10;                        float endY = event.getY();&#10;&#10;                        float deltaX = endX - startX;&#10;                        float deltaY = endY - startY;&#10;&#10;                        // Check if it's a horizontal swipe (more horizontal than vertical)&#10;                        if (Math.abs(deltaX) &gt; Math.abs(deltaY) &amp;&amp; Math.abs(deltaX) &gt; MIN_SWIPE_DISTANCE) {&#10;                            if (deltaX &gt; 0) {&#10;                                // Left to right swipe - delete one character&#10;                                handleBackspace();&#10;                                return true;&#10;                            }&#10;                        }&#10;                        break;&#10;                }&#10;                return false;&#10;            }&#10;        });&#10;    }&#10;&#10;    private void handleBackspace() {&#10;        if (isResultShown) {&#10;            // If result is shown, clear everything&#10;            handleClearInput();&#10;            return;&#10;        }&#10;&#10;        if (!currentInput.isEmpty()) {&#10;            if (currentInput.length() == 1) {&#10;                // If only one character left, set to &quot;0&quot;&#10;                currentInput = &quot;&quot;;&#10;                tvDisplay.setText(&quot;0&quot;);&#10;            } else {&#10;                // Remove last character&#10;                currentInput = currentInput.substring(0, currentInput.length() - 1);&#10;                tvDisplay.setText(currentInput);&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onClick(View v) {&#10;&#10;        Button button = (Button) v;&#10;        String buttonText = button.getText().toString();&#10;&#10;        int id = v.getId();&#10;&#10;        if (id == R.id.btn0 || id == R.id.btn1 || id == R.id.btn2 || id == R.id.btn3 ||&#10;            id == R.id.btn4 || id == R.id.btn5 || id == R.id.btn6 || id == R.id.btn7 ||&#10;            id == R.id.btn8 || id == R.id.btn9) {&#10;            handleNumberInput(buttonText);&#10;        } else if (id == R.id.btnDecimal) {&#10;            handleDecimalInput();&#10;        } else if (id == R.id.btnAdd || id == R.id.btnSubtract || id == R.id.btnMultiply || id == R.id.btnDivide) {&#10;            handleOperatorInput(buttonText);&#10;        } else if (id == R.id.btnEquals) {&#10;            handleEqualsInput();&#10;        } else if (id == R.id.btnClear) {&#10;            handleClearInput();&#10;        } else if (id == R.id.btnPercent) {&#10;            handlePercentInput();&#10;        } else if (id == R.id.btnPlusMinus) {&#10;            handlePlusMinusInput();&#10;        }&#10;    }&#10;&#10;    private void animateButtonPress(View button) {&#10;        // Scale down and back up for button press effect&#10;        ObjectAnimator scaleDownX = ObjectAnimator.ofFloat(button, &quot;scaleX&quot;, 1.0f, 0.9f);&#10;        ObjectAnimator scaleDownY = ObjectAnimator.ofFloat(button, &quot;scaleY&quot;, 1.0f, 0.9f);&#10;        ObjectAnimator scaleUpX = ObjectAnimator.ofFloat(button, &quot;scaleX&quot;, 0.9f, 1.0f);&#10;        ObjectAnimator scaleUpY = ObjectAnimator.ofFloat(button, &quot;scaleY&quot;, 0.9f, 1.0f);&#10;&#10;        // Alpha animation for press effect&#10;        ObjectAnimator alphaDown = ObjectAnimator.ofFloat(button, &quot;alpha&quot;, 1.0f, 0.7f);&#10;        ObjectAnimator alphaUp = ObjectAnimator.ofFloat(button, &quot;alpha&quot;, 0.7f, 1.0f);&#10;&#10;        AnimatorSet scaleDown = new AnimatorSet();&#10;        scaleDown.playTogether(scaleDownX, scaleDownY, alphaDown);&#10;        scaleDown.setDuration(100);&#10;&#10;        AnimatorSet scaleUp = new AnimatorSet();&#10;        scaleUp.playTogether(scaleUpX, scaleUpY, alphaUp);&#10;        scaleUp.setDuration(100);&#10;&#10;        AnimatorSet fullAnimation = new AnimatorSet();&#10;        fullAnimation.playSequentially(scaleDown, scaleUp);&#10;        fullAnimation.setInterpolator(new AccelerateDecelerateInterpolator());&#10;        fullAnimation.start();&#10;    }&#10;&#10;    private void handleNumberInput(String number) {&#10;        if (isResultShown) {&#10;            currentInput = &quot;&quot;;&#10;            isResultShown = false;&#10;        }&#10;&#10;        if (currentInput.equals(&quot;0&quot;) &amp;&amp; !number.equals(&quot;0&quot;)) {&#10;            currentInput = number;&#10;        } else if (!currentInput.equals(&quot;0&quot;)) {&#10;            currentInput += number;&#10;        }&#10;&#10;        // Display with comma formatting for input&#10;        String displayText = formatInputNumber(currentInput);&#10;        tvDisplay.setText(displayText);&#10;        isOperatorPressed = false;&#10;    }&#10;&#10;    private void handleDecimalInput() {&#10;        if (isResultShown) {&#10;            currentInput = &quot;0&quot;;&#10;            isResultShown = false;&#10;        }&#10;&#10;        if (currentInput.isEmpty()) {&#10;            currentInput = &quot;0&quot;;&#10;        }&#10;&#10;        if (!currentInput.contains(&quot;.&quot;)) {&#10;            currentInput += &quot;.&quot;;&#10;            tvDisplay.setText(currentInput);&#10;        }&#10;        isOperatorPressed = false;&#10;    }&#10;&#10;    private void handleOperatorInput(String op) {&#10;        if (!currentInput.isEmpty() &amp;&amp; !isOperatorPressed) {&#10;            if (!operator.isEmpty()) {&#10;                calculateResult();&#10;            } else {&#10;                firstOperand = Double.parseDouble(currentInput);&#10;            }&#10;        }&#10;&#10;        operator = convertOperatorSymbol(op);&#10;        isOperatorPressed = true;&#10;        isResultShown = false;&#10;&#10;        String displayText = formatNumber(firstOperand) + &quot; &quot; + op;&#10;        tvPrevious.setText(displayText);&#10;        currentInput = &quot;&quot;;&#10;    }&#10;&#10;    private void handleEqualsInput() {&#10;        if (!operator.isEmpty() &amp;&amp; !currentInput.isEmpty()) {&#10;            calculateResult();&#10;            tvPrevious.setText(&quot;&quot;);&#10;            operator = &quot;&quot;;&#10;            isResultShown = true;&#10;        }&#10;    }&#10;&#10;    private void handleClearInput() {&#10;        currentInput = &quot;&quot;;&#10;        operator = &quot;&quot;;&#10;        firstOperand = 0;&#10;        isOperatorPressed = false;&#10;        isResultShown = false;&#10;        tvDisplay.setText(&quot;0&quot;);&#10;        tvPrevious.setText(&quot;&quot;);&#10;    }&#10;&#10;    private void handlePercentInput() {&#10;        if (!currentInput.isEmpty()) {&#10;            double value = Double.parseDouble(currentInput);&#10;&#10;            // If there's a pending operation and first operand exists&#10;            if (!operator.isEmpty() &amp;&amp; firstOperand != 0) {&#10;                // Calculate percentage of the first operand&#10;                value = (firstOperand * value) / 100;&#10;            } else {&#10;                // Simple percentage conversion&#10;                value = value / 100;&#10;            }&#10;&#10;            currentInput = String.valueOf(value);&#10;            tvDisplay.setText(formatNumber(value));&#10;            isResultShown = false; // Allow further operations&#10;        }&#10;    }&#10;&#10;    private void handlePlusMinusInput() {&#10;        if (!currentInput.isEmpty() &amp;&amp; !currentInput.equals(&quot;0&quot;)) {&#10;            if (currentInput.startsWith(&quot;-&quot;)) {&#10;                currentInput = currentInput.substring(1);&#10;            } else {&#10;                currentInput = &quot;-&quot; + currentInput;&#10;            }&#10;            tvDisplay.setText(currentInput);&#10;        }&#10;    }&#10;&#10;    private void calculateResult() {&#10;        if (currentInput.isEmpty()) return;&#10;&#10;        double secondOperand = Double.parseDouble(currentInput);&#10;        double result = 0;&#10;        String expression = &quot;&quot;;&#10;&#10;        try {&#10;            switch (operator) {&#10;                case &quot;+&quot;:&#10;                    result = firstOperand + secondOperand;&#10;                    expression = formatNumber(firstOperand) + &quot; + &quot; + formatNumber(secondOperand);&#10;                    break;&#10;                case &quot;-&quot;:&#10;                    result = firstOperand - secondOperand;&#10;                    expression = formatNumber(firstOperand) + &quot; - &quot; + formatNumber(secondOperand);&#10;                    break;&#10;                case &quot;*&quot;:&#10;                    result = firstOperand * secondOperand;&#10;                    expression = formatNumber(firstOperand) + &quot; × &quot; + formatNumber(secondOperand);&#10;                    break;&#10;                case &quot;/&quot;:&#10;                    if (secondOperand != 0) {&#10;                        result = firstOperand / secondOperand;&#10;                        expression = formatNumber(firstOperand) + &quot; ÷ &quot; + formatNumber(secondOperand);&#10;                    } else {&#10;                        tvDisplay.setText(&quot;Error&quot;);&#10;                        return;&#10;                    }&#10;                    break;&#10;            }&#10;&#10;            firstOperand = result;&#10;            currentInput = String.valueOf(result);&#10;            String formattedResult = formatNumber(result);&#10;            tvDisplay.setText(formattedResult);&#10;&#10;            // Save calculation to history&#10;            addCalculationToHistory(expression, formattedResult);&#10;&#10;        } catch (Exception e) {&#10;            tvDisplay.setText(&quot;Error&quot;);&#10;            handleClearInput();&#10;        }&#10;    }&#10;&#10;    private String convertOperatorSymbol(String symbol) {&#10;        switch (symbol) {&#10;            case &quot;÷&quot;:&#10;                return &quot;/&quot;;&#10;            case &quot;×&quot;:&#10;                return &quot;*&quot;;&#10;            case &quot;−&quot;:&#10;                return &quot;-&quot;;&#10;            default:&#10;                return symbol;&#10;        }&#10;    }&#10;&#10;    private void copyToClipboard() {&#10;        String textToCopy = tvDisplay.getText().toString();&#10;        if (!textToCopy.isEmpty() &amp;&amp; !textToCopy.equals(&quot;0&quot;)) {&#10;            ClipboardManager clipboard = (ClipboardManager) getSystemService(Context.CLIPBOARD_SERVICE);&#10;            ClipData clip = ClipData.newPlainText(&quot;Calculator Result&quot;, textToCopy);&#10;            clipboard.setPrimaryClip(clip);&#10;&#10;            // Show copy animation&#10;            animateCopy();&#10;&#10;            Toast.makeText(this, &quot;Copied: &quot; + textToCopy, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    private void animateCopy() {&#10;        // Scale animation for copy feedback&#10;        ObjectAnimator scaleX = ObjectAnimator.ofFloat(tvDisplay, &quot;scaleX&quot;, 1.0f, 1.1f, 1.0f);&#10;        ObjectAnimator scaleY = ObjectAnimator.ofFloat(tvDisplay, &quot;scaleY&quot;, 1.0f, 1.1f, 1.0f);&#10;&#10;        AnimatorSet animatorSet = new AnimatorSet();&#10;        animatorSet.playTogether(scaleX, scaleY);&#10;        animatorSet.setDuration(300);&#10;        animatorSet.setInterpolator(new AccelerateDecelerateInterpolator());&#10;        animatorSet.start();&#10;    }&#10;&#10;    private String formatInputNumber(String input) {&#10;        try {&#10;            // Remove any existing commas first&#10;            String cleanInput = input.replace(&quot;,&quot;, &quot;&quot;);&#10;&#10;            if (cleanInput.contains(&quot;.&quot;)) {&#10;                // Handle decimal numbers&#10;                String[] parts = cleanInput.split(&quot;\\.&quot;);&#10;                String wholePart = parts[0];&#10;                String decimalPart = parts[1];&#10;&#10;                if (wholePart.length() &gt;= 4) {&#10;                    long wholeNumber = Long.parseLong(wholePart);&#10;                    return numberFormat.format(wholeNumber) + &quot;.&quot; + decimalPart;&#10;                }&#10;                return cleanInput;&#10;            } else {&#10;                // Handle whole numbers&#10;                if (cleanInput.length() &gt;= 4) {&#10;                    long number = Long.parseLong(cleanInput);&#10;                    return numberFormat.format(number);&#10;                }&#10;                return cleanInput;&#10;            }&#10;        } catch (Exception e) {&#10;            return input;&#10;        }&#10;    }&#10;&#10;    private String formatNumber(double number) {&#10;        if (number == (long) number) {&#10;            // For whole numbers, use comma separator for thousands&#10;            long longNumber = (long) number;&#10;            if (Math.abs(longNumber) &gt;= 1000) {&#10;                return numberFormat.format(longNumber);&#10;            } else {&#10;                return String.valueOf(longNumber);&#10;            }&#10;        } else {&#10;            // For decimal numbers&#10;            if (Math.abs(number) &gt;= 1000) {&#10;                numberFormat.setMaximumFractionDigits(10);&#10;                numberFormat.setMinimumFractionDigits(0);&#10;                return numberFormat.format(number);&#10;            } else {&#10;                String formatted = decimalFormat.format(number);&#10;                return formatted;&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean onNavigationItemSelected(@NonNull MenuItem item) {&#10;        int id = item.getItemId();&#10;&#10;        if (id == R.id.nav_calculator) {&#10;            showCalculatorView();&#10;        } else if (id == R.id.nav_currency_converter) {&#10;            showCurrencyConverterView();&#10;        } else if (id == R.id.nav_history) {&#10;            showHistoryView();&#10;        }&#10;&#10;        // Close drawer after item selection&#10;        drawerLayout.closeDrawers();&#10;        return true;&#10;    }&#10;&#10;    @Override&#10;    public void onBackPressed() {&#10;        // First priority: Check if navigation drawer is open&#10;        if (drawerLayout.isDrawerOpen(navigationView)) {&#10;            drawerLayout.closeDrawers();&#10;            return;&#10;        }&#10;&#10;        // Second priority: Check if currency converter content is visible&#10;        LinearLayout currencyContent = findViewById(R.id.currency_converter_content);&#10;        if (currencyContent != null &amp;&amp; currencyContent.getVisibility() == View.VISIBLE) {&#10;            // If currency converter is visible and drawer is closed, go back to calculator&#10;            showCalculatorView();&#10;            return;&#10;        }&#10;&#10;        // Third priority: Check if history content is visible&#10;        LinearLayout historyContent = findViewById(R.id.history_content);&#10;        if (historyContent != null &amp;&amp; historyContent.getVisibility() == View.VISIBLE) {&#10;            // If history is visible and drawer is closed, go back to calculator&#10;            showCalculatorView();&#10;            return;&#10;        }&#10;&#10;        // Last: Default back press (close app)&#10;        super.onBackPressed();&#10;    }&#10;&#10;    private void showCurrencyConverterView() {&#10;        // Hide calculator and history content&#10;        LinearLayout calculatorContent = findViewById(R.id.calculator_content);&#10;        if (calculatorContent != null) {&#10;            calculatorContent.setVisibility(View.GONE);&#10;        }&#10;&#10;        LinearLayout historyContent = findViewById(R.id.history_content);&#10;        if (historyContent != null) {&#10;            historyContent.setVisibility(View.GONE);&#10;        }&#10;&#10;        // Show currency converter content without animation&#10;        LinearLayout currencyContent = findViewById(R.id.currency_converter_content);&#10;        if (currencyContent != null) {&#10;            currencyContent.setVisibility(View.VISIBLE);&#10;        }&#10;&#10;        // Update toolbar title&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Currency Converter&quot;);&#10;        }&#10;&#10;        // Update navigation menu selection to currency converter&#10;        navigationView.setCheckedItem(R.id.nav_currency_converter);&#10;    }&#10;&#10;    private void showHistoryView() {&#10;        // Hide calculator and currency converter content&#10;        LinearLayout calculatorContent = findViewById(R.id.calculator_content);&#10;        if (calculatorContent != null) {&#10;            calculatorContent.setVisibility(View.GONE);&#10;        }&#10;&#10;        LinearLayout currencyContent = findViewById(R.id.currency_converter_content);&#10;        if (currencyContent != null) {&#10;            currencyContent.setVisibility(View.GONE);&#10;        }&#10;&#10;        // Show history content without animation&#10;        LinearLayout historyContent = findViewById(R.id.history_content);&#10;        if (historyContent != null) {&#10;            historyContent.setVisibility(View.VISIBLE);&#10;            loadAndDisplayHistory();&#10;        }&#10;&#10;        // Update toolbar title&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;History&quot;);&#10;        }&#10;&#10;        // Update navigation menu selection to history&#10;        navigationView.setCheckedItem(R.id.nav_history);&#10;    }&#10;&#10;    private void showCalculatorView() {&#10;        // Show calculator content and hide other content&#10;        LinearLayout calculatorContent = findViewById(R.id.calculator_content);&#10;        if (calculatorContent != null) {&#10;            calculatorContent.setVisibility(View.VISIBLE);&#10;        }&#10;&#10;        LinearLayout historyContent = findViewById(R.id.history_content);&#10;        if (historyContent != null) {&#10;            historyContent.setVisibility(View.GONE);&#10;        }&#10;&#10;        LinearLayout currencyContent = findViewById(R.id.currency_converter_content);&#10;        if (currencyContent != null) {&#10;            currencyContent.setVisibility(View.GONE);&#10;        }&#10;&#10;        // Update toolbar title&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;My Calculator&quot;);&#10;        }&#10;&#10;        // Update navigation menu selection to calculator&#10;        navigationView.setCheckedItem(R.id.nav_calculator);&#10;    }&#10;&#10;    private void initializeHistoryComponents() {&#10;        // Initialize RecyclerView for history&#10;        recyclerViewHistory = findViewById(R.id.recyclerViewHistory);&#10;        recyclerViewHistory.setLayoutManager(new LinearLayoutManager(this));&#10;&#10;        emptyStateLayout = findViewById(R.id.emptyStateLayout);&#10;        btnClearHistory = findViewById(R.id.btnClearHistory);&#10;&#10;        // Setup SharedPreferences and Gson&#10;        sharedPreferences = getSharedPreferences(PREF_NAME, MODE_PRIVATE);&#10;        gson = new Gson();&#10;&#10;        // Load history from SharedPreferences&#10;        loadHistory();&#10;&#10;        // Setup adapter&#10;        historyAdapter = new HistoryAdapter(historyList);&#10;        recyclerViewHistory.setAdapter(historyAdapter);&#10;&#10;        // Show or hide empty state&#10;        updateEmptyState();&#10;    }&#10;&#10;    private void loadHistory() {&#10;        // Load history list from SharedPreferences&#10;        String json = sharedPreferences.getString(HISTORY_KEY, null);&#10;        Type type = new TypeToken&lt;ArrayList&lt;CalculationHistory&gt;&gt;() {}.getType();&#10;        historyList = gson.fromJson(json, type);&#10;&#10;        if (historyList == null) {&#10;            historyList = new ArrayList&lt;&gt;();&#10;        }&#10;    }&#10;&#10;    private void updateEmptyState() {&#10;        if (historyList.isEmpty()) {&#10;            emptyStateLayout.setVisibility(View.VISIBLE);&#10;            recyclerViewHistory.setVisibility(View.GONE);&#10;        } else {&#10;            emptyStateLayout.setVisibility(View.GONE);&#10;            recyclerViewHistory.setVisibility(View.VISIBLE);&#10;        }&#10;    }&#10;&#10;    private void loadAndDisplayHistory() {&#10;        // Reload history from SharedPreferences&#10;        loadHistory();&#10;&#10;        // Update adapter with new data&#10;        if (historyAdapter != null) {&#10;            historyAdapter.updateHistory(historyList);&#10;        }&#10;&#10;        // Update empty state&#10;        updateEmptyState();&#10;&#10;        // Setup clear history button click listener&#10;        if (btnClearHistory != null) {&#10;            btnClearHistory.setOnClickListener(v -&gt; clearAllHistory());&#10;        }&#10;    }&#10;&#10;    private void clearAllHistory() {&#10;        historyList.clear();&#10;        saveHistory();&#10;        historyAdapter.updateHistory(historyList);&#10;        updateEmptyState();&#10;        Toast.makeText(this, &quot;History cleared&quot;, Toast.LENGTH_SHORT).show();&#10;    }&#10;&#10;    private void saveHistory() {&#10;        SharedPreferences.Editor editor = sharedPreferences.edit();&#10;        String json = gson.toJson(historyList);&#10;        editor.putString(HISTORY_KEY, json);&#10;        editor.apply();&#10;    }&#10;&#10;    // Method to add calculation to history (called when equals is pressed)&#10;    public void addCalculationToHistory(String expression, String result) {&#10;        // Create timestamp&#10;        SimpleDateFormat sdf = new SimpleDateFormat(&quot;MMM dd, hh:mm a&quot;, Locale.getDefault());&#10;        String timestamp = sdf.format(new Date());&#10;&#10;        // Create new history entry&#10;        CalculationHistory newHistory = new CalculationHistory(expression, result, timestamp, System.currentTimeMillis());&#10;&#10;        // Add to beginning of list&#10;        historyList.add(0, newHistory);&#10;&#10;        // Keep only last 100 calculations&#10;        if (historyList.size() &gt; 100) {&#10;            historyList = historyList.subList(0, 100);&#10;        }&#10;&#10;        // Save to SharedPreferences&#10;        saveHistory();&#10;    }&#10;&#10;    private void initializeCurrencyConverterComponents() {&#10;        spinnerFromCurrency = findViewById(R.id.spinnerFromCurrency);&#10;        spinnerToCurrency = findViewById(R.id.spinnerToCurrency);&#10;        etFromAmount = findViewById(R.id.etFromAmount);&#10;        tvToAmount = findViewById(R.id.tvToAmount);&#10;        tvExchangeRate = findViewById(R.id.tvExchangeRate);&#10;        tvLastUpdated = findViewById(R.id.tvLastUpdated);&#10;        btnConvert = findViewById(R.id.btnConvert);&#10;        btnSwapCurrencies = findViewById(R.id.btnSwapCurrencies);&#10;        btnUsdToInr = findViewById(R.id.btnUsdToInr);&#10;        btnEurToInr = findViewById(R.id.btnEurToInr);&#10;        btnGbpToInr = findViewById(R.id.btnGbpToInr);&#10;        btnInrToUsd = findViewById(R.id.btnInrToUsd);&#10;&#10;        // Setup currency spinners with custom layout for better visibility&#10;        ArrayAdapter&lt;String&gt; currencyAdapter = new ArrayAdapter&lt;String&gt;(this, android.R.layout.simple_spinner_item, currencyNames) {&#10;            @Override&#10;            public View getView(int position, View convertView, ViewGroup parent) {&#10;                View view = super.getView(position, convertView, parent);&#10;                TextView textView = (TextView) view;&#10;                textView.setTextColor(getResources().getColor(R.color.display_text)); // White text&#10;                textView.setTextSize(16);&#10;                return view;&#10;            }&#10;&#10;            @Override&#10;            public View getDropDownView(int position, View convertView, ViewGroup parent) {&#10;                View view = super.getDropDownView(position, convertView, parent);&#10;                TextView textView = (TextView) view;&#10;                textView.setTextColor(getResources().getColor(R.color.display_text)); // White text&#10;                textView.setBackgroundColor(getResources().getColor(R.color.background_black)); // Black background&#10;                textView.setPadding(20, 20, 20, 20);&#10;                textView.setTextSize(16);&#10;                return view;&#10;            }&#10;        };&#10;&#10;        currencyAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spinnerFromCurrency.setAdapter(currencyAdapter);&#10;&#10;        // Create separate adapter for &quot;To&quot; spinner&#10;        ArrayAdapter&lt;String&gt; currencyAdapter2 = new ArrayAdapter&lt;String&gt;(this, android.R.layout.simple_spinner_item, currencyNames) {&#10;            @Override&#10;            public View getView(int position, View convertView, ViewGroup parent) {&#10;                View view = super.getView(position, convertView, parent);&#10;                TextView textView = (TextView) view;&#10;                textView.setTextColor(getResources().getColor(R.color.display_text)); // White text&#10;                textView.setTextSize(16);&#10;                return view;&#10;            }&#10;&#10;            @Override&#10;            public View getDropDownView(int position, View convertView, ViewGroup parent) {&#10;                View view = super.getDropDownView(position, convertView, parent);&#10;                TextView textView = (TextView) view;&#10;                textView.setTextColor(getResources().getColor(R.color.display_text)); // White text&#10;                textView.setBackgroundColor(getResources().getColor(R.color.background_black)); // Black background&#10;                textView.setPadding(20, 20, 20, 20);&#10;                textView.setTextSize(16);&#10;                return view;&#10;            }&#10;        };&#10;&#10;        currencyAdapter2.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spinnerToCurrency.setAdapter(currencyAdapter2);&#10;&#10;        // Set default selection to first currency&#10;        spinnerFromCurrency.setSelection(0); // USD&#10;        spinnerToCurrency.setSelection(1);   // INR&#10;&#10;        // Setup Convert button click listener&#10;        btnConvert.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                performCurrencyConversion();&#10;            }&#10;        });&#10;&#10;        // Setup Swap button click listener&#10;        btnSwapCurrencies.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                swapCurrencies();&#10;            }&#10;        });&#10;&#10;        // Setup popular conversion buttons&#10;        btnUsdToInr.setOnClickListener(v -&gt; performDirectConversion(&quot;USD&quot;, &quot;INR&quot;));&#10;        btnEurToInr.setOnClickListener(v -&gt; performDirectConversion(&quot;EUR&quot;, &quot;INR&quot;));&#10;        btnGbpToInr.setOnClickListener(v -&gt; performDirectConversion(&quot;GBP&quot;, &quot;INR&quot;));&#10;        btnInrToUsd.setOnClickListener(v -&gt; performDirectConversion(&quot;INR&quot;, &quot;USD&quot;));&#10;    }&#10;&#10;    private void performCurrencyConversion() {&#10;        try {&#10;            String amountText = etFromAmount.getText().toString().trim();&#10;            if (amountText.isEmpty()) {&#10;                Toast.makeText(this, &quot;Please enter amount&quot;, Toast.LENGTH_SHORT).show();&#10;                return;&#10;            }&#10;&#10;            double amount = Double.parseDouble(amountText);&#10;            int fromPosition = spinnerFromCurrency.getSelectedItemPosition();&#10;            int toPosition = spinnerToCurrency.getSelectedItemPosition();&#10;&#10;            String fromCurrency = currencies[fromPosition];&#10;            String toCurrency = currencies[toPosition];&#10;&#10;            // Sample exchange rates (in real app, you'd fetch from API)&#10;            double convertedAmount = convertCurrency(amount, fromCurrency, toCurrency);&#10;&#10;            // Display result&#10;            tvToAmount.setText(String.format(&quot;%.2f&quot;, convertedAmount));&#10;&#10;            // Update exchange rate display&#10;            double rate = getExchangeRate(fromCurrency, toCurrency);&#10;            tvExchangeRate.setText(String.format(&quot;1 %s = %.4f %s&quot;, fromCurrency, rate, toCurrency));&#10;&#10;            // Update timestamp&#10;            tvLastUpdated.setText(&quot;Last updated: Just now&quot;);&#10;&#10;        } catch (NumberFormatException e) {&#10;            Toast.makeText(this, &quot;Please enter valid amount&quot;, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    private void swapCurrencies() {&#10;        int fromPosition = spinnerFromCurrency.getSelectedItemPosition();&#10;        int toPosition = spinnerToCurrency.getSelectedItemPosition();&#10;&#10;        // Swap selections&#10;        spinnerFromCurrency.setSelection(toPosition);&#10;        spinnerToCurrency.setSelection(fromPosition);&#10;&#10;        // If there's amount entered, perform conversion automatically&#10;        String amountText = etFromAmount.getText().toString().trim();&#10;        if (!amountText.isEmpty()) {&#10;            performCurrencyConversion();&#10;        }&#10;    }&#10;&#10;    private void performDirectConversion(String fromCurrency, String toCurrency) {&#10;        spinnerFromCurrency.setSelection(getIndex(fromCurrency));&#10;        spinnerToCurrency.setSelection(getIndex(toCurrency));&#10;&#10;        // Perform conversion&#10;        performCurrencyConversion();&#10;    }&#10;&#10;    private double convertCurrency(double amount, String fromCurrency, String toCurrency) {&#10;        if (fromCurrency.equals(toCurrency)) {&#10;            return amount;&#10;        }&#10;&#10;        double rate = getExchangeRate(fromCurrency, toCurrency);&#10;        return amount * rate;&#10;    }&#10;&#10;    private double getExchangeRate(String fromCurrency, String toCurrency) {&#10;        // Sample exchange rates (in real app, you'd fetch from API)&#10;        // All rates are relative to USD&#10;        double[][] exchangeRates = {&#10;            // USD, INR, EUR, GBP, JPY, AUD, CAD, CHF, CNY, SGD&#10;            {1.0, 83.15, 0.92, 0.79, 149.50, 1.52, 1.36, 0.89, 7.23, 1.35}, // USD&#10;            {0.012, 1.0, 0.011, 0.0095, 1.80, 0.018, 0.016, 0.011, 0.087, 0.016}, // INR&#10;            {1.09, 90.45, 1.0, 0.86, 162.80, 1.65, 1.48, 0.97, 7.87, 1.47}, // EUR&#10;            {1.27, 105.38, 1.16, 1.0, 189.24, 1.92, 1.72, 1.13, 9.15, 1.71}, // GBP&#10;            {0.0067, 0.56, 0.0061, 0.0053, 1.0, 0.010, 0.0091, 0.0060, 0.048, 0.0090}, // JPY&#10;            {0.66, 54.70, 0.61, 0.52, 98.36, 1.0, 0.89, 0.59, 4.76, 0.89}, // AUD&#10;            {0.74, 61.14, 0.68, 0.58, 109.93, 1.12, 1.0, 0.66, 5.32, 0.99}, // CAD&#10;            {1.12, 93.48, 1.04, 0.89, 167.98, 1.70, 1.52, 1.0, 8.12, 1.52}, // CHF&#10;            {0.138, 11.50, 0.127, 0.109, 20.68, 0.21, 0.188, 0.123, 1.0, 0.187}, // CNY&#10;            {0.74, 61.59, 0.68, 0.58, 110.74, 1.13, 1.01, 0.66, 5.36, 1.0}  // SGD&#10;        };&#10;&#10;        int fromIndex = getIndex(fromCurrency);&#10;        int toIndex = getIndex(toCurrency);&#10;&#10;        if (fromIndex == -1 || toIndex == -1) {&#10;            return 1.0; // Default rate if currency not found&#10;        }&#10;&#10;        return exchangeRates[fromIndex][toIndex];&#10;    }&#10;&#10;    private int getIndex(String currency) {&#10;        for (int i = 0; i &lt; currencies.length; i++) {&#10;            if (currencies[i].equals(currency)) {&#10;                return i;&#10;            }&#10;        }&#10;        return -1;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_analytics.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_analytics.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M16,1H4c-1.1,0 -2,0.9 -2,2v14h2V3h12V1zM19,5H8c-1.1,0 -2,0.9 -2,2v14c0,1.1 0.9,2 2,2h11c1.1,0 2,-0.9 2,-2V7c0,-1.1 -0.9,-2 -2,-2zM19,21H8V7h11v14z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_category.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_category.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M4,10.5c-0.83,0 -1.5,0.67 -1.5,1.5s0.67,1.5 1.5,1.5 1.5,-0.67 1.5,-1.5 -0.67,-1.5 -1.5,-1.5zM4,4.5c-0.83,0 -1.5,0.67 -1.5,1.5S3.17,7.5 4,7.5 5.5,6.83 5.5,6 4.83,4.5 4,4.5zM4,16.5c-0.83,0 -1.5,0.67 -1.5,1.5s0.67,1.5 1.5,1.5 1.5,-0.67 1.5,-1.5 -0.67,-1.5 -1.5,-1.5zM7,19h14v-2H7v2zM7,13h14v-2H7v2zM7,5v2h14V5H7z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_favorite.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_favorite.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;m12,21.35l-1.45,-1.32C5.4,15.36 2,12.28 2,8.5 2,5.42 4.42,3 7.5,3c1.74,0 3.41,0.81 4.5,2.09C13.09,3.81 14.76,3 16.5,3 19.58,3 22,5.42 22,8.5c0,3.78 -3.4,6.86 -8.55,11.54L12,21.35z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_lightbulb.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_lightbulb.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M9,21c0,0.5 0.4,1 1,1h4c0.6,0 1,-0.5 1,-1v-1H9v1zM12,2C8.1,2 5,5.1 5,9c0,2.4 1.2,4.5 3,5.7V17c0,0.5 0.4,1 1,1h6c0.6,0 1,-0.5 1,-1v-2.3c1.8,-1.3 3,-3.4 3,-5.7 0,-3.9 -3.1,-7 -7,-7z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_recycle_bin.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_recycle_bin.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M6,19c0,1.1 0.9,2 2,2h8c1.1,0 2,-0.9 2,-2V7H6v12zM8,9h8v10H8V9zM15.5,4l-1,-1h-5l-1,1H5v2h14V4z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/strings.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/strings.xml" />
              <option name="originalContent" value="&lt;resources&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;Advanced Calculator&lt;/string&gt;&#10;&#10;    &lt;!-- Navigation Drawer --&gt;&#10;    &lt;string name=&quot;navigation_drawer_open&quot;&gt;Open navigation drawer&lt;/string&gt;&#10;    &lt;string name=&quot;navigation_drawer_close&quot;&gt;Close navigation drawer&lt;/string&gt;&#10;    &lt;string name=&quot;nav_header_desc&quot;&gt;Navigation header&lt;/string&gt;&#10;    &lt;string name=&quot;nav_header_subtitle&quot;&gt;Math made minimalist&lt;/string&gt;&#10;&#10;    &lt;!-- Menu items --&gt;&#10;    &lt;string name=&quot;menu_calculator&quot;&gt;Calculator&lt;/string&gt;&#10;    &lt;string name=&quot;menu_currency_converter&quot;&gt;Currency Converter&lt;/string&gt;&#10;    &lt;string name=&quot;menu_history&quot;&gt;History&lt;/string&gt;&#10;&lt;/resources&gt;" />
              <option name="updatedContent" value="&lt;resources&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;My Calculator&lt;/string&gt;&#10;&#10;    &lt;!-- Navigation Drawer --&gt;&#10;    &lt;string name=&quot;navigation_drawer_open&quot;&gt;Open navigation drawer&lt;/string&gt;&#10;    &lt;string name=&quot;navigation_drawer_close&quot;&gt;Close navigation drawer&lt;/string&gt;&#10;    &lt;string name=&quot;nav_header_desc&quot;&gt;Navigation header&lt;/string&gt;&#10;    &lt;string name=&quot;nav_header_subtitle&quot;&gt;Math made minimalist&lt;/string&gt;&#10;&#10;    &lt;!-- Menu items --&gt;&#10;    &lt;string name=&quot;menu_calculator&quot;&gt;Calculator&lt;/string&gt;&#10;    &lt;string name=&quot;menu_currency_converter&quot;&gt;Currency Converter&lt;/string&gt;&#10;    &lt;string name=&quot;menu_history&quot;&gt;History&lt;/string&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>